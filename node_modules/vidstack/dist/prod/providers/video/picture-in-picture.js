import { listenEvent } from 'maverick.js/std';
import { _ as canUsePictureInPicture } from '../../media-core.js';

class VideoPictureInPicture {
  constructor(_video, _media) {
    this.ta = _video;
    this.n = _media;
    listenEvent(this.ta, "enterpictureinpicture", this.Fh.bind(this));
    listenEvent(this.ta, "leavepictureinpicture", this.Gh.bind(this));
  }
  get active() {
    return document.pictureInPictureElement === this.ta;
  }
  get supported() {
    return canUsePictureInPicture(this.ta);
  }
  async enter() {
    return this.ta.requestPictureInPicture();
  }
  exit() {
    return document.exitPictureInPicture();
  }
  Fh(event) {
    this.Pc(true, event);
  }
  Gh(event) {
    this.Pc(false, event);
  }
  Pc = (active, event) => {
    this.n.delegate.U("picture-in-picture-change", {
      detail: active,
      trigger: event
    });
  };
}

export { VideoPictureInPicture as V };
