import { isString } from 'maverick.js/std';
import { H as HLS_VIDEO_EXTENSIONS, a as HLS_VIDEO_TYPES } from '../audio/loader.js';
import { U as isHLSSupported, p as preconnect } from '../../media-core.js';
import { V as VideoProviderLoader } from '../video/loader.js';

class HLSProviderLoader extends VideoProviderLoader {
  static supported = isHLSSupported();
  preconnect() {
    preconnect("https://cdn.jsdelivr.net", "preconnect");
  }
  canPlay({ src, type }) {
    return HLSProviderLoader.supported && isString(src) && (HLS_VIDEO_EXTENSIONS.test(src) || HLS_VIDEO_TYPES.has(type));
  }
  async load(context) {
    return new (await import('./provider.js')).HLSProvider(this.ta, context);
  }
}

export { HLSProviderLoader as H };
