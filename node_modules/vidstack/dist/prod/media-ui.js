import { signal, effect, createContext, hasProvidedContext, useContext, provideContext, peek, isWriteSignal, StoreFactory, useStore, computed, onDispose, scoped, tick } from 'maverick.js';
import { ComponentController, Component, defineElement, prop, defineProp, method } from 'maverick.js/element';
import { s as scopedRaf, A as ARIAKeyShortcuts, a as setAttributeIfEmpty, o as onPress, u as useMedia, b as setARIALabel, i as isTrackCaptionKind, I as IS_SAFARI, f as functionThrottle, c as findActiveCue, d as canChangeVolume, e as onTrackChapterChange, g as isElementParent, h as isCueActive, p as preconnect } from './media-core.js';
import { $$_create_component, $$_create_walker, $$_effect, $$_attr, $$_next_element, $$_create_template, $$_listen, $$_ref, $$_setup_custom_element, $$_insert_at_marker_lite, $$_peek, $$_clone, $$_insert_lite, $$_computed, $$_next_template, $$_scoped } from 'maverick.js/dom';
import { I as Icon } from './icons/icon.js';
import { listenEvent, setAttribute, ariaBool as ariaBool$1, isNull, isNumber, setStyle, isDOMEvent, isKeyboardEvent, isUndefined, animationFrameThrottle, isDOMElement, isPointerEvent, isMouseEvent, isTouchEvent, kebabToCamelCase, createDisposalBin } from 'maverick.js/std';
import { CaptionsRenderer, renderVTTCueString, updateTimedVTTCueNodes } from 'media-captions';

function round(num, decimalPlaces = 2) {
  return Number(num.toFixed(decimalPlaces));
}
function getNumberOfDecimalPlaces(num) {
  return String(num).split(".")[1]?.length ?? 0;
}
function clampNumber(min, value, max) {
  return Math.max(min, Math.min(max, value));
}

let $keyboard = signal(false);
{
  listenEvent(document, "pointerdown", () => {
    $keyboard.set(false);
  });
  listenEvent(document, "keydown", (e) => {
    if (e.metaKey || e.altKey || e.ctrlKey)
      return;
    $keyboard.set(true);
  });
}
class FocusVisibleController extends ComponentController {
  Ke = signal(false);
  onConnect(el) {
    effect(() => {
      if (!$keyboard()) {
        this.Ke.set(false);
        updateFocusAttr(el, false);
        this.listen("pointerenter", this.Le.bind(this));
        this.listen("pointerleave", this.Me.bind(this));
        return;
      }
      const active = document.activeElement === el;
      this.Ke.set(active);
      updateFocusAttr(el, active);
      this.listen("focus", this.Ne.bind(this));
      this.listen("blur", this.Oe.bind(this));
    });
  }
  focused() {
    return this.Ke();
  }
  Ne() {
    this.Ke.set(true);
    updateFocusAttr(this.el, true);
  }
  Oe() {
    this.Ke.set(false);
    updateFocusAttr(this.el, false);
  }
  Le() {
    updateHoverAttr(this.el, true);
  }
  Me() {
    updateHoverAttr(this.el, false);
  }
}
function updateFocusAttr(el, isFocused) {
  setAttribute(el, "data-focus", isFocused);
  setAttribute(el, "data-hocus", isFocused);
}
function updateHoverAttr(el, isHovering) {
  setAttribute(el, "data-hocus", isHovering);
  setAttribute(el, "data-hover", isHovering);
}

const tooltipContext = createContext();

class Tooltip extends Component {
  static el = defineElement({
    tagName: "media-tooltip",
    props: { position: "top center" }
  });
  onAttach(el) {
    if (hasProvidedContext(tooltipContext)) {
      scopedRaf(() => {
        if (!el.isConnected)
          return;
        const tooltip = useContext(tooltipContext);
        tooltip.eb(el);
      });
    }
    this.setAttributes({
      position: this.$props.position
    });
  }
}

let id = 0;
class TooltipController extends ComponentController {
  constructor(instance) {
    super(instance);
    provideContext(tooltipContext, {
      eb: this.eb.bind(this)
    });
  }
  eb(tooltipEl) {
    const tooltipId = `media-tooltip-${++id}`;
    setAttribute(this.el, "aria-describedby", tooltipId);
    setAttribute(tooltipEl, "id", tooltipId);
    setAttribute(tooltipEl, "role", "tooltip");
    this.el.removeAttribute("aria-label");
  }
}

var __defProp$3 = Object.defineProperty;
var __getOwnPropDesc$3 = Object.getOwnPropertyDescriptor;
var __decorateClass$3 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$3(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$3(target, key, result);
  return result;
};
const toggleButtonProps = {
  disabled: false,
  defaultPressed: false,
  defaultAppearance: false
};
class ToggleButton extends Component {
  static el = defineElement({
    tagName: "media-toggle-button",
    props: toggleButtonProps
  });
  fb = signal(false);
  gb;
  constructor(instance) {
    super(instance);
    new FocusVisibleController(instance);
    new TooltipController(instance);
    if (this.gb)
      new ARIAKeyShortcuts(instance, this.gb);
  }
  get pressed() {
    return peek(this.fb);
  }
  onAttach(el) {
    if (isWriteSignal(this.fb)) {
      this.fb.set(this.$props.defaultPressed());
    }
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "role", "button");
    const { disabled, defaultAppearance } = this.$props;
    this.setAttributes({
      disabled,
      "default-appearance": defaultAppearance,
      "data-pressed": this.fb,
      "aria-pressed": this.hb.bind(this),
      "data-media-button": true
    });
  }
  onConnect(el) {
    onPress(el, this.ib.bind(this));
  }
  hb() {
    return ariaBool$1(this.fb());
  }
  jb(event) {
    if (isWriteSignal(this.fb)) {
      this.fb.set((p) => !p);
    }
  }
  ib(event) {
    const disabled = this.$props.disabled();
    if (disabled) {
      if (disabled)
        event.stopImmediatePropagation();
      return;
    }
    event.preventDefault();
    this.jb(event);
  }
}
__decorateClass$3([
  prop
], ToggleButton.prototype, "pressed", 1);

var Icon$56 = `<path d="M8.66667 6.66667C8.29848 6.66667 8 6.96514 8 7.33333V24.6667C8 25.0349 8.29848 25.3333 8.66667 25.3333H12.6667C13.0349 25.3333 13.3333 25.0349 13.3333 24.6667V7.33333C13.3333 6.96514 13.0349 6.66667 12.6667 6.66667H8.66667Z" fill="currentColor"/> <path d="M19.3333 6.66667C18.9651 6.66667 18.6667 6.96514 18.6667 7.33333V24.6667C18.6667 25.0349 18.9651 25.3333 19.3333 25.3333H23.3333C23.7015 25.3333 24 25.0349 24 24.6667V7.33333C24 6.96514 23.7015 6.66667 23.3333 6.66667H19.3333Z" fill="currentColor"/>`;

var Icon$59 = `<path d="M10.6667 6.6548C10.6667 6.10764 11.2894 5.79346 11.7295 6.11862L24.377 15.4634C24.7377 15.7298 24.7377 16.2692 24.3771 16.5357L11.7295 25.8813C11.2895 26.2065 10.6667 25.8923 10.6667 25.3451L10.6667 6.6548Z" fill="currentColor"/>`;

var Icon$71 = `<path d="M15.6038 12.2147C16.0439 12.5399 16.6667 12.2257 16.6667 11.6786V10.1789C16.6667 10.1001 16.7351 10.0384 16.8134 10.0479C20.1116 10.4494 22.6667 13.2593 22.6667 16.6659C22.6667 20.3481 19.6817 23.3332 15.9995 23.3332C12.542 23.3332 9.69927 20.7014 9.36509 17.332C9.32875 16.9655 9.03371 16.6662 8.66548 16.6662L6.66655 16.6666C6.29841 16.6666 5.99769 16.966 6.02187 17.3334C6.36494 22.5454 10.7012 26.6667 16 26.6667C21.5228 26.6667 26 22.1895 26 16.6667C26 11.4103 21.9444 7.10112 16.7916 6.69757C16.7216 6.69209 16.6667 6.63396 16.6667 6.56372V4.98824C16.6667 4.44106 16.0439 4.12689 15.6038 4.45206L11.0765 7.79738C10.7159 8.06387 10.7159 8.60326 11.0766 8.86973L15.6038 12.2147Z" fill="currentColor"/>`;

class PlayButton extends ToggleButton {
  static el = defineElement({
    tagName: "media-play-button",
    props: toggleButtonProps
  });
  n;
  gb = "togglePaused";
  onAttach(el) {
    this.n = useMedia();
    this.fb = this.kb.bind(this);
    super.onAttach(el);
    setARIALabel(el, this.lb.bind(this));
    const { paused, ended } = this.n.$store;
    this.setAttributes({
      "data-paused": paused,
      "data-ended": ended
    });
  }
  jb(event) {
    const remote = this.n.remote;
    this.fb() ? remote.pause(event) : remote.play(event);
  }
  kb() {
    const { paused } = this.n.$store;
    return !paused();
  }
  lb() {
    const { paused } = this.n.$store;
    return paused() ? "Play" : "Pause";
  }
  render() {
    return [
      $$_create_component(Icon, { paths: Icon$59, slot: "play" }),
      $$_create_component(Icon, { paths: Icon$71, slot: "replay" }),
      $$_create_component(Icon, { paths: Icon$56, slot: "pause" })
    ];
  }
}

var Icon$24 = `<path d="M8 28.0003C8 27.6321 8.29848 27.3336 8.66667 27.3336H23.3333C23.7015 27.3336 24 27.6321 24 28.0003V29.3336C24 29.7018 23.7015 30.0003 23.3333 30.0003H8.66667C8.29848 30.0003 8 29.7018 8 29.3336V28.0003Z" fill="currentColor"/> <path fill-rule="evenodd" clip-rule="evenodd" d="M4.66602 6.66699C4.29783 6.66699 3.99935 6.96547 3.99935 7.33366V24.667C3.99935 25.0352 4.29783 25.3337 4.66602 25.3337H27.3327C27.7009 25.3337 27.9994 25.0352 27.9994 24.667V7.33366C27.9994 6.96547 27.7009 6.66699 27.3327 6.66699H4.66602ZM8.66659 21.3333C8.2984 21.3333 7.99992 21.0349 7.99992 20.6667V11.3333C7.99992 10.9651 8.2984 10.6667 8.66659 10.6667H13.9999C14.3681 10.6667 14.6666 10.9651 14.6666 11.3333V12.6667C14.6666 13.0349 14.3681 13.3333 13.9999 13.3333H10.7999C10.7263 13.3333 10.6666 13.393 10.6666 13.4667V18.5333C10.6666 18.607 10.7263 18.6667 10.7999 18.6667H13.9999C14.3681 18.6667 14.6666 18.9651 14.6666 19.3333V20.6667C14.6666 21.0349 14.3681 21.3333 13.9999 21.3333H8.66659ZM17.9999 21.3333C17.6317 21.3333 17.3333 21.0349 17.3333 20.6667V11.3333C17.3333 10.9651 17.6317 10.6667 17.9999 10.6667H23.3333C23.7014 10.6667 23.9999 10.9651 23.9999 11.3333V12.6667C23.9999 13.0349 23.7014 13.3333 23.3333 13.3333H20.1333C20.0596 13.3333 19.9999 13.393 19.9999 13.4667V18.5333C19.9999 18.607 20.0596 18.6667 20.1333 18.6667H23.3333C23.7014 18.6667 23.9999 18.9651 23.9999 19.3333V20.6667C23.9999 21.0349 23.7014 21.3333 23.3333 21.3333H17.9999Z" fill="currentColor"/>`;

var Icon$25 = `<path fill-rule="evenodd" clip-rule="evenodd" d="M4.6661 6.66699C4.29791 6.66699 3.99943 6.96547 3.99943 7.33366V24.667C3.99943 25.0352 4.29791 25.3337 4.6661 25.3337H27.3328C27.701 25.3337 27.9994 25.0352 27.9994 24.667V7.33366C27.9994 6.96547 27.701 6.66699 27.3328 6.66699H4.6661ZM8.66667 21.3333C8.29848 21.3333 8 21.0349 8 20.6667V11.3333C8 10.9651 8.29848 10.6667 8.66667 10.6667H14C14.3682 10.6667 14.6667 10.9651 14.6667 11.3333V12.6667C14.6667 13.0349 14.3682 13.3333 14 13.3333H10.8C10.7264 13.3333 10.6667 13.393 10.6667 13.4667V18.5333C10.6667 18.607 10.7264 18.6667 10.8 18.6667H14C14.3682 18.6667 14.6667 18.9651 14.6667 19.3333V20.6667C14.6667 21.0349 14.3682 21.3333 14 21.3333H8.66667ZM18 21.3333C17.6318 21.3333 17.3333 21.0349 17.3333 20.6667V11.3333C17.3333 10.9651 17.6318 10.6667 18 10.6667H23.3333C23.7015 10.6667 24 10.9651 24 11.3333V12.6667C24 13.0349 23.7015 13.3333 23.3333 13.3333H20.1333C20.0597 13.3333 20 13.393 20 13.4667V18.5333C20 18.607 20.0597 18.6667 20.1333 18.6667H23.3333C23.7015 18.6667 24 18.9651 24 19.3333V20.6667C24 21.0349 23.7015 21.3333 23.3333 21.3333H18Z" fill="currentColor"/>`;

function ariaBool(value) {
  return value ? "true" : "false";
}
function $ariaBool(signal) {
  return () => ariaBool(signal());
}

class CaptionButton extends ToggleButton {
  static el = defineElement({
    tagName: "media-caption-button",
    props: toggleButtonProps
  });
  n;
  gb = "toggleCaptions";
  onAttach(el) {
    this.n = useMedia();
    this.fb = this.kb.bind(this);
    super.onAttach(el);
    setARIALabel(el, this.lb.bind(this));
    this.setAttributes({
      "aria-hidden": $ariaBool(this.mb.bind(this))
    });
  }
  jb(event) {
    this.n.remote.toggleCaptions(event);
  }
  kb() {
    const { textTrack } = this.n.$store, track = textTrack();
    return !!track && isTrackCaptionKind(track);
  }
  mb() {
    const { textTracks } = this.n.$store;
    return textTracks().filter(isTrackCaptionKind).length == 0;
  }
  lb() {
    const { textTrack } = this.n.$store;
    return textTrack() ? "Closed-Captions Off" : "Closed-Captions On";
  }
  render() {
    return [
      $$_create_component(Icon, { paths: Icon$24, slot: "on" }),
      $$_create_component(Icon, { paths: Icon$25, slot: "off" })
    ];
  }
}

var Icon$37 = `<path d="M19.3334 13.3333C18.9652 13.3333 18.6667 13.0349 18.6667 12.6667L18.6667 7.33333C18.6667 6.96514 18.9652 6.66666 19.3334 6.66666H21.3334C21.7015 6.66666 22 6.96514 22 7.33333V9.86666C22 9.9403 22.0597 10 22.1334 10L24.6667 10C25.0349 10 25.3334 10.2985 25.3334 10.6667V12.6667C25.3334 13.0349 25.0349 13.3333 24.6667 13.3333L19.3334 13.3333Z" fill="currentColor"/> <path d="M13.3334 19.3333C13.3334 18.9651 13.0349 18.6667 12.6667 18.6667H7.33335C6.96516 18.6667 6.66669 18.9651 6.66669 19.3333V21.3333C6.66669 21.7015 6.96516 22 7.33335 22H9.86669C9.94032 22 10 22.0597 10 22.1333L10 24.6667C10 25.0349 10.2985 25.3333 10.6667 25.3333H12.6667C13.0349 25.3333 13.3334 25.0349 13.3334 24.6667L13.3334 19.3333Z" fill="currentColor"/> <path d="M18.6667 24.6667C18.6667 25.0349 18.9652 25.3333 19.3334 25.3333H21.3334C21.7015 25.3333 22 25.0349 22 24.6667V22.1333C22 22.0597 22.0597 22 22.1334 22H24.6667C25.0349 22 25.3334 21.7015 25.3334 21.3333V19.3333C25.3334 18.9651 25.0349 18.6667 24.6667 18.6667L19.3334 18.6667C18.9652 18.6667 18.6667 18.9651 18.6667 19.3333L18.6667 24.6667Z" fill="currentColor"/> <path d="M10.6667 13.3333H12.6667C13.0349 13.3333 13.3334 13.0349 13.3334 12.6667L13.3334 10.6667V7.33333C13.3334 6.96514 13.0349 6.66666 12.6667 6.66666H10.6667C10.2985 6.66666 10 6.96514 10 7.33333L10 9.86666C10 9.9403 9.94033 10 9.86669 10L7.33335 10C6.96516 10 6.66669 10.2985 6.66669 10.6667V12.6667C6.66669 13.0349 6.96516 13.3333 7.33335 13.3333L10.6667 13.3333Z" fill="currentColor"/>`;

var Icon$38 = `<path d="M25.3299 7.26517C25.2958 6.929 25.0119 6.66666 24.6667 6.66666H19.3334C18.9652 6.66666 18.6667 6.96514 18.6667 7.33333V9.33333C18.6667 9.70152 18.9652 10 19.3334 10L21.8667 10C21.9403 10 22 10.0597 22 10.1333V12.6667C22 13.0349 22.2985 13.3333 22.6667 13.3333H24.6667C25.0349 13.3333 25.3334 13.0349 25.3334 12.6667V7.33333C25.3334 7.31032 25.3322 7.28758 25.3299 7.26517Z" fill="currentColor"/> <path d="M22 21.8667C22 21.9403 21.9403 22 21.8667 22L19.3334 22C18.9652 22 18.6667 22.2985 18.6667 22.6667V24.6667C18.6667 25.0349 18.9652 25.3333 19.3334 25.3333L24.6667 25.3333C25.0349 25.3333 25.3334 25.0349 25.3334 24.6667V19.3333C25.3334 18.9651 25.0349 18.6667 24.6667 18.6667H22.6667C22.2985 18.6667 22 18.9651 22 19.3333V21.8667Z" fill="currentColor"/> <path d="M12.6667 22H10.1334C10.0597 22 10 21.9403 10 21.8667V19.3333C10 18.9651 9.70154 18.6667 9.33335 18.6667H7.33335C6.96516 18.6667 6.66669 18.9651 6.66669 19.3333V24.6667C6.66669 25.0349 6.96516 25.3333 7.33335 25.3333H12.6667C13.0349 25.3333 13.3334 25.0349 13.3334 24.6667V22.6667C13.3334 22.2985 13.0349 22 12.6667 22Z" fill="currentColor"/> <path d="M10 12.6667V10.1333C10 10.0597 10.0597 10 10.1334 10L12.6667 10C13.0349 10 13.3334 9.70152 13.3334 9.33333V7.33333C13.3334 6.96514 13.0349 6.66666 12.6667 6.66666H7.33335C6.96516 6.66666 6.66669 6.96514 6.66669 7.33333V12.6667C6.66669 13.0349 6.96516 13.3333 7.33335 13.3333H9.33335C9.70154 13.3333 10 13.0349 10 12.6667Z" fill="currentColor"/>`;

class FullscreenButton extends ToggleButton {
  static el = defineElement({
    tagName: "media-fullscreen-button",
    props: {
      ...toggleButtonProps,
      target: "prefer-media"
    }
  });
  n;
  gb = "toggleFullscreen";
  onAttach(el) {
    this.n = useMedia();
    this.fb = this.kb.bind(this);
    super.onAttach(el);
    setARIALabel(el, this.lb.bind(this));
    const { fullscreen } = this.n.$store;
    this.setAttributes({
      "aria-hidden": $ariaBool(this.mb.bind(this)),
      "data-fullscreen": fullscreen
    });
  }
  jb(event) {
    const remote = this.n.remote, target = this.$props.target();
    this.fb() ? remote.exitFullscreen(target, event) : remote.enterFullscreen(target, event);
  }
  kb() {
    const { fullscreen } = this.n.$store;
    return fullscreen();
  }
  mb() {
    const { canFullscreen } = this.n.$store;
    return !canFullscreen();
  }
  lb() {
    const { fullscreen } = this.n.$store;
    return fullscreen() ? "Exit Fullscreen" : "Enter Fullscreen";
  }
  render() {
    return [
      $$_create_component(Icon, { paths: Icon$38, slot: "enter" }),
      $$_create_component(Icon, { paths: Icon$37, slot: "exit" })
    ];
  }
}

var Icon$52 = `<path d="M17.5091 24.6594C17.5091 25.2066 16.8864 25.5208 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9991 9.36923 19.9991H4.66667C4.29848 19.9991 4 19.7006 4 19.3325V12.6658C4 12.2976 4.29848 11.9991 4.66667 11.9991H9.37115C9.39967 11.9991 9.42745 11.99 9.45039 11.973L16.4463 6.8036C16.8863 6.47842 17.5091 6.79259 17.5091 7.33977L17.5091 24.6594Z" fill="currentColor"/> <path d="M28.8621 13.6422C29.1225 13.3818 29.1225 12.9597 28.8621 12.6994L27.9193 11.7566C27.659 11.4962 27.2368 11.4962 26.9765 11.7566L24.7134 14.0197C24.6613 14.0717 24.5769 14.0717 24.5248 14.0197L22.262 11.7568C22.0016 11.4964 21.5795 11.4964 21.3191 11.7568L20.3763 12.6996C20.116 12.9599 20.116 13.382 20.3763 13.6424L22.6392 15.9053C22.6913 15.9573 22.6913 16.0418 22.6392 16.0938L20.3768 18.3562C20.1165 18.6166 20.1165 19.0387 20.3768 19.299L21.3196 20.2419C21.58 20.5022 22.0021 20.5022 22.2624 20.2418L24.5248 17.9795C24.5769 17.9274 24.6613 17.9274 24.7134 17.9795L26.976 20.2421C27.2363 20.5024 27.6585 20.5024 27.9188 20.2421L28.8616 19.2992C29.122 19.0389 29.122 18.6168 28.8616 18.3564L26.599 16.0938C26.547 16.0418 26.547 15.9573 26.599 15.9053L28.8621 13.6422Z" fill="currentColor"/>`;

var Icon$101 = `<path d="M17.5091 24.6595C17.5091 25.2066 16.8864 25.5208 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9992 9.36923 19.9992H4.66667C4.29848 19.9992 4 19.7007 4 19.3325V12.6658C4 12.2976 4.29848 11.9992 4.66667 11.9992H9.37115C9.39967 11.9992 9.42745 11.99 9.45039 11.9731L16.4463 6.80363C16.8863 6.47845 17.5091 6.79262 17.5091 7.3398L17.5091 24.6595Z" fill="currentColor"/> <path d="M27.5091 9.33336C27.8773 9.33336 28.1758 9.63184 28.1758 10V22C28.1758 22.3682 27.8773 22.6667 27.5091 22.6667H26.1758C25.8076 22.6667 25.5091 22.3682 25.5091 22V10C25.5091 9.63184 25.8076 9.33336 26.1758 9.33336L27.5091 9.33336Z" fill="currentColor"/> <path d="M22.1758 12C22.544 12 22.8424 12.2985 22.8424 12.6667V19.3334C22.8424 19.7016 22.544 20 22.1758 20H20.8424C20.4743 20 20.1758 19.7016 20.1758 19.3334V12.6667C20.1758 12.2985 20.4743 12 20.8424 12H22.1758Z" fill="currentColor"/>`;

var Icon$102 = `<path d="M17.5091 24.6594C17.5091 25.2066 16.8864 25.5207 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9991 9.36923 19.9991H4.66667C4.29848 19.9991 4 19.7006 4 19.3324V12.6658C4 12.2976 4.29848 11.9991 4.66667 11.9991H9.37115C9.39967 11.9991 9.42745 11.99 9.45039 11.973L16.4463 6.80358C16.8863 6.4784 17.5091 6.79258 17.5091 7.33975L17.5091 24.6594Z" fill="currentColor"/> <path d="M22.8424 12.6667C22.8424 12.2985 22.544 12 22.1758 12H20.8424C20.4743 12 20.1758 12.2985 20.1758 12.6667V19.3333C20.1758 19.7015 20.4743 20 20.8424 20H22.1758C22.544 20 22.8424 19.7015 22.8424 19.3333V12.6667Z" fill="currentColor"/>`;

class MuteButton extends ToggleButton {
  static el = defineElement({
    tagName: "media-mute-button",
    props: toggleButtonProps
  });
  n;
  gb = "toggleMuted";
  onAttach(el) {
    this.n = useMedia();
    this.fb = this.kb.bind(this);
    setARIALabel(el, this.lb.bind(this));
    this.setAttributes({
      "data-muted": this.fb,
      "data-volume": this.nb.bind(this)
    });
    super.onAttach(el);
  }
  jb(event) {
    const remote = this.n.remote;
    this.fb() ? remote.unmute(event) : remote.mute(event);
  }
  kb() {
    const { muted, volume } = this.n.$store;
    return muted() || volume() === 0;
  }
  lb() {
    return this.fb() ? "Unmute" : "Mute";
  }
  nb() {
    const { muted, volume } = this.n.$store, $volume = volume();
    if (muted() || $volume === 0)
      return "muted";
    else if ($volume >= 0.5)
      return "high";
    else if ($volume < 0.5)
      return "low";
  }
  render() {
    return [
      $$_create_component(Icon, { paths: Icon$101, slot: "volume-high" }),
      $$_create_component(Icon, { paths: Icon$102, slot: "volume-low" }),
      $$_create_component(Icon, { paths: Icon$52, slot: "volume-muted" })
    ];
  }
}

var Icon$57 = `<path d="M5.33334 26V19.4667C5.33334 19.393 5.39304 19.3333 5.46668 19.3333H7.86668C7.94031 19.3333 8.00001 19.393 8.00001 19.4667V23.3333C8.00001 23.7015 8.29849 24 8.66668 24H23.3333C23.7015 24 24 23.7015 24 23.3333V8.66666C24 8.29847 23.7015 7.99999 23.3333 7.99999H19.4667C19.393 7.99999 19.3333 7.9403 19.3333 7.86666V5.46666C19.3333 5.39302 19.393 5.33333 19.4667 5.33333H26C26.3682 5.33333 26.6667 5.63181 26.6667 5.99999V26C26.6667 26.3682 26.3682 26.6667 26 26.6667H6.00001C5.63182 26.6667 5.33334 26.3682 5.33334 26Z" fill="currentColor"/> <path d="M14.0098 8.42359H10.806C10.6872 8.42359 10.6277 8.56721 10.7117 8.6512L16.5491 14.4886C16.8094 14.7489 16.8094 15.171 16.5491 15.4314L15.3234 16.657C15.0631 16.9174 14.641 16.9174 14.3806 16.657L8.63739 10.9138C8.55339 10.8298 8.40978 10.8893 8.40978 11.0081V14.0236C8.40978 14.3918 8.1113 14.6903 7.74311 14.6903H6.00978C5.64159 14.6903 5.34311 14.3918 5.34311 14.0236L5.34311 6.02359C5.34311 5.6554 5.64159 5.35692 6.00978 5.35692L14.0098 5.35692C14.378 5.35692 14.6764 5.6554 14.6764 6.02359V7.75692C14.6764 8.12511 14.378 8.42359 14.0098 8.42359Z" fill="currentColor"/>`;

var Icon$58 = `<path d="M16 15.3333C15.6318 15.3333 15.3333 15.6318 15.3333 16V20C15.3333 20.3682 15.6318 20.6667 16 20.6667H21.3333C21.7015 20.6667 22 20.3682 22 20V16C22 15.6318 21.7015 15.3333 21.3333 15.3333H16Z" fill="currentColor"/> <path fill-rule="evenodd" clip-rule="evenodd" d="M5.33333 7.33334C5.33333 6.96515 5.63181 6.66667 5.99999 6.66667H26C26.3682 6.66667 26.6667 6.96515 26.6667 7.33334V24.6667C26.6667 25.0349 26.3682 25.3333 26 25.3333H5.99999C5.63181 25.3333 5.33333 25.0349 5.33333 24.6667V7.33334ZM7.99999 10C7.99999 9.63182 8.29847 9.33334 8.66666 9.33334H23.3333C23.7015 9.33334 24 9.63182 24 10V22C24 22.3682 23.7015 22.6667 23.3333 22.6667H8.66666C8.29847 22.6667 7.99999 22.3682 7.99999 22V10Z" fill="currentColor"/>`;

class PIPButton extends ToggleButton {
  static el = defineElement({
    tagName: "media-pip-button",
    props: toggleButtonProps
  });
  n;
  gb = "togglePictureInPicture";
  onAttach(el) {
    this.n = useMedia();
    this.fb = this.kb.bind(this);
    super.onAttach(el);
    setARIALabel(el, this.lb.bind(this));
    const { pictureInPicture } = this.n.$store;
    this.setAttributes({
      "aria-hidden": $ariaBool(this.mb.bind(this)),
      "data-pip": pictureInPicture
    });
  }
  jb(event) {
    const remote = this.n.remote;
    this.fb() ? remote.exitPictureInPicture(event) : remote.enterPictureInPicture(event);
  }
  kb() {
    const { pictureInPicture } = this.n.$store;
    return pictureInPicture();
  }
  mb() {
    const { canPictureInPicture } = this.n.$store;
    return !canPictureInPicture();
  }
  lb() {
    const { pictureInPicture } = this.n.$store;
    return pictureInPicture() ? "Exit Picture In Picture" : "Enter Picture In Picture";
  }
  render() {
    return [
      $$_create_component(Icon, { paths: Icon$58, slot: "enter" }),
      $$_create_component(Icon, { paths: Icon$57, slot: "exit" })
    ];
  }
}

var Icon$77 = `<path d="M15.6038 12.2148C16.0439 12.5399 16.6667 12.2257 16.6667 11.6786V10.1789C16.6667 10.1001 16.7351 10.0384 16.8134 10.0479C20.1116 10.4494 22.6667 13.2593 22.6667 16.6659C22.6667 20.3481 19.6817 23.3332 15.9995 23.3332C12.542 23.3332 9.69927 20.7015 9.36509 17.332C9.32875 16.9655 9.03371 16.6662 8.66548 16.6662L6.66655 16.6666C6.29841 16.6666 5.99769 16.966 6.02187 17.3334C6.36494 22.5454 10.7012 26.6667 16 26.6667C21.5228 26.6667 26 22.1895 26 16.6667C26 11.4103 21.9444 7.10112 16.7916 6.69758C16.7216 6.69209 16.6667 6.63396 16.6667 6.56372V4.98824C16.6667 4.44106 16.0439 4.12689 15.6038 4.45207L11.0765 7.79738C10.7159 8.06387 10.7159 8.60327 11.0766 8.86974L15.6038 12.2148Z" fill="currentColor"/>`;

var Icon$81 = `<path d="M16.4167 12.2148C15.9766 12.5399 15.3538 12.2257 15.3538 11.6786V10.1789C15.3538 10.1001 15.2854 10.0384 15.2072 10.0479C11.9089 10.4494 9.35384 13.2593 9.35384 16.6659C9.35384 20.3481 12.3389 23.3332 16.0211 23.3332C19.4785 23.3332 22.3212 20.7015 22.6554 17.332C22.6918 16.9655 22.9868 16.6662 23.355 16.6662L25.354 16.6666C25.7221 16.6666 26.0228 16.966 25.9986 17.3334C25.6556 22.5454 21.3193 26.6667 16.0205 26.6667C10.4977 26.6667 6.02051 22.1895 6.02051 16.6667C6.02051 11.4103 10.0761 7.10112 15.2289 6.69758C15.2989 6.69209 15.3538 6.63396 15.3538 6.56372V4.98824C15.3538 4.44106 15.9766 4.12689 16.4167 4.45207L20.944 7.79738C21.3046 8.06387 21.3046 8.60327 20.9439 8.86974L16.4167 12.2148Z" fill="currentColor"/>`;

class SeekButton extends Component {
  static el = defineElement({
    tagName: "media-seek-button",
    props: {
      disabled: false,
      defaultAppearance: false,
      seconds: 30
    }
  });
  n;
  constructor(instance) {
    super(instance);
    this.n = useMedia();
    new FocusVisibleController(instance);
    new TooltipController(instance);
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "role", "button");
    setARIALabel(el, this.lb.bind(this));
    const { seconds, defaultAppearance } = this.$props;
    this.setAttributes({
      seconds,
      "default-appearance": defaultAppearance,
      "aria-hidden": $ariaBool(this.mb.bind(this)),
      "data-media-button": true
    });
  }
  onConnect(el) {
    onPress(el, this.jb.bind(this));
  }
  mb() {
    const { canSeek } = this.n.$store;
    return !canSeek();
  }
  lb() {
    const { seconds } = this.$props;
    return `Seek ${seconds() > 0 ? "forward" : "backward"} ${seconds()} seconds`;
  }
  jb(event) {
    const { seconds, disabled } = this.$props;
    if (disabled())
      return;
    const { currentTime } = this.n.$store, seekTo = currentTime() + seconds();
    this.n.remote.seek(seekTo, event);
  }
  render() {
    return [
      $$_create_component(Icon, { paths: Icon$77, slot: "backward" }),
      $$_create_component(Icon, { paths: Icon$81, slot: "forward" })
    ];
  }
}

const SliderStoreFactory = new StoreFactory({
  min: 0,
  max: 100,
  value: 50,
  pointerValue: 0,
  focused: false,
  dragging: false,
  pointing: false,
  get interactive() {
    return this.dragging || this.focused || this.pointing;
  },
  get fillRate() {
    return calcRate(this.min, this.max, this.value);
  },
  get fillPercent() {
    return this.fillRate * 100;
  },
  get pointerRate() {
    return calcRate(this.min, this.max, this.pointerValue);
  },
  get pointerPercent() {
    return this.pointerRate * 100;
  }
});
function calcRate(min, max, value) {
  const range = max - min, offset = value - min;
  return range > 0 ? offset / range : 0;
}

const sliderProps = {
  min: 0,
  max: 100,
  disabled: false,
  value: 100,
  step: 1,
  keyStep: 1,
  shiftKeyMultiplier: 5,
  trackClass: null,
  trackFillClass: null,
  trackProgressClass: null,
  thumbContainerClass: null,
  thumbClass: null
};

function getClampedValue(min, max, value, step) {
  return clampNumber(min, round(value, getNumberOfDecimalPlaces(step)), max);
}
function getValueFromRate(min, max, rate, step) {
  const boundRate = clampNumber(0, rate, 1), range = max - min, fill = range * boundRate, stepRatio = fill / step, steps = step * stepRatio;
  return min + steps;
}

const SliderKeyDirection = {
  Left: -1,
  ArrowLeft: -1,
  Up: 1,
  ArrowUp: 1,
  Right: 1,
  ArrowRight: 1,
  Down: -1,
  ArrowDown: -1
};
class SliderEventsController extends ComponentController {
  constructor(instance, _delegate, _media) {
    super(instance);
    this.jg = _delegate;
    this.n = _media;
  }
  onConnect() {
    effect(this.vg.bind(this));
    effect(this.wg.bind(this));
    if (this.jg.wc) {
      scopedRaf(() => {
        const outlet = this.n.player?.querySelector("media-outlet");
        if (outlet) {
          this.Md = outlet;
          listenEvent(outlet, "touchstart", this.xg.bind(this));
          listenEvent(outlet, "touchmove", this.yg.bind(this));
        }
      });
    }
  }
  Md = null;
  lg = null;
  ng = null;
  xg(event) {
    this.lg = event.touches[0].clientX;
  }
  yg(event) {
    if (isNull(this.lg))
      return;
    event.preventDefault();
    if (this.$store.dragging())
      return;
    const diff = event.touches[0].clientX - this.lg;
    if (Math.abs(diff) > 20) {
      this.lg = event.touches[0].clientX;
      this.ng = this.$store.value();
      this.qg(this.ng, event);
    }
  }
  vg() {
    if (this.jg.pb())
      return;
    this.listen("focus", this.Ne.bind(this));
    this.listen("pointerenter", this.Le.bind(this));
    this.listen("pointermove", this.zg.bind(this));
    this.listen("pointerleave", this.Me.bind(this));
    this.listen("pointerdown", this.Ag.bind(this));
    this.listen("keydown", this.ab.bind(this));
    this.listen("keyup", this.$a.bind(this));
  }
  wg() {
    if (this.jg.pb() || !this.$store.dragging())
      return;
    listenEvent(document, "pointerup", this.Bg.bind(this));
    listenEvent(document, "pointermove", this.Cg.bind(this));
    if (IS_SAFARI) {
      listenEvent(document, "touchmove", this.Dg.bind(this), {
        passive: false
      });
    }
  }
  Ne() {
    this.kg(this.$store.value());
  }
  rg(newValue, trigger) {
    const { value, min, max, dragging } = this.$store;
    const clampedValue = Math.max(min(), Math.min(newValue, max()));
    value.set(clampedValue);
    const event = this.createEvent("value-change", { detail: clampedValue, trigger });
    this.el.dispatchEvent(event);
    this.jg.Kb(event);
    if (dragging()) {
      const event2 = this.createEvent("drag-value-change", { detail: clampedValue, trigger });
      this.el.dispatchEvent(event2);
      this.jg.Nb(event2);
    }
  }
  kg(value, trigger) {
    const { pointerValue, dragging } = this.$store;
    pointerValue.set(value);
    this.dispatch("pointer-value-change", { detail: value, trigger });
    if (dragging()) {
      const dir = this.jg.qb === "vertical" ? "bottom" : "left", size = this.jg.qb === "vertical" ? "height" : "width";
      if (this.og && !this.el?.hasAttribute("data-chapters")) {
        this.og.style[size] = value + "%";
      }
      if (this.mg) {
        this.mg.style[dir] = value + "%";
      }
      this.rg(value, trigger);
    }
  }
  pg(event) {
    let thumbPositionRate, rect = this.el.getBoundingClientRect(), { min, max } = this.$store;
    if (this.jg.qb === "vertical") {
      const { bottom: trackBottom, height: trackHeight } = rect;
      thumbPositionRate = (trackBottom - event.clientY) / trackHeight;
    } else {
      if (this.lg && isNumber(this.ng)) {
        const { width } = this.Md.getBoundingClientRect(), rate = (event.clientX - this.lg) / width, range = max() - min(), diff = range * Math.abs(rate);
        thumbPositionRate = (rate < 0 ? this.ng - diff : this.ng + diff) / range;
      } else {
        const { left: trackLeft, width: trackWidth } = rect;
        thumbPositionRate = (event.clientX - trackLeft) / trackWidth;
      }
    }
    return Math.max(
      min(),
      Math.min(
        max(),
        this.jg.Jb(
          getValueFromRate(min(), max(), thumbPositionRate, this.jg.yb())
        )
      )
    );
  }
  Le(event) {
    this.$store.pointing.set(true);
  }
  zg(event) {
    const { dragging } = this.$store;
    if (dragging())
      return;
    this.kg(this.pg(event), event);
  }
  Me(event) {
    this.$store.pointing.set(false);
  }
  Ag(event) {
    if (event.button !== 0)
      return;
    const value = this.pg(event);
    this.qg(value, event);
    this.kg(value, event);
  }
  mg = null;
  og = null;
  qg(value, trigger) {
    const { dragging } = this.$store;
    if (dragging())
      return;
    dragging.set(true);
    this.mg = this.el.querySelector(
      'shadow-root > div[part="thumb-container"]'
    );
    this.og = this.el.querySelector(
      'shadow-root > div[part~="track-fill"]'
    );
    this.n.remote.pauseUserIdle(trigger);
    const event = this.createEvent("drag-start", { detail: value, trigger });
    this.el.dispatchEvent(event);
    this.jg.Lb(event);
  }
  tg(value, trigger) {
    const { dragging } = this.$store;
    if (!dragging())
      return;
    dragging.set(false);
    if (this.og) {
      setStyle(this.og, "width", null);
      this.og = null;
    }
    if (this.mg) {
      setStyle(this.mg, "left", null);
      setStyle(this.mg, "bottom", null);
      this.mg = null;
    }
    this.n.remote.resumeUserIdle(trigger);
    const event = this.createEvent("drag-end", { detail: value, trigger });
    this.el.dispatchEvent(event);
    this.jg.Mb(event);
    this.lg = null;
    this.ng = null;
  }
  // -------------------------------------------------------------------------------------------
  // Keyboard Events
  // -------------------------------------------------------------------------------------------
  sg;
  ab(event) {
    if (isDOMEvent(event)) {
      const trigger = event.trigger;
      if (isKeyboardEvent(trigger))
        event = trigger;
      else
        return;
    }
    const { key } = event;
    const { min, max } = this.$store;
    let newValue;
    if (key === "Home" || key === "PageUp") {
      newValue = min();
    } else if (key === "End" || key === "PageDown") {
      newValue = max();
    } else if (!event.metaKey && /[0-9]/.test(key)) {
      newValue = (max() - min()) / 10 * Number(key);
    }
    if (!isUndefined(newValue)) {
      this.kg(newValue, event);
      this.rg(newValue, event);
      return;
    }
    const value = this.ug(event);
    if (!value)
      return;
    const repeat = key === this.sg;
    if (!this.$store.dragging() && repeat)
      this.qg(value, event);
    this.kg(value, event);
    if (!repeat)
      this.rg(value, event);
    this.sg = key;
  }
  $a(event) {
    if (isDOMEvent(event)) {
      const trigger = event.trigger;
      if (isKeyboardEvent(trigger))
        event = trigger;
      else
        return;
    }
    this.sg = "";
    const { dragging, value } = this.$store;
    if (!dragging())
      return;
    const newValue = this.ug(event) ?? value();
    this.kg(newValue);
    this.tg(newValue, event);
  }
  ug(event) {
    const { key, shiftKey } = event, isValidKey = Object.keys(SliderKeyDirection).includes(key);
    if (!isValidKey)
      return;
    const { shiftKeyMultiplier } = this.$props;
    const { value } = this.$store, step = this.jg.yb(), keyStep = this.jg.Ib();
    const modifiedStep = !shiftKey ? keyStep : keyStep * shiftKeyMultiplier(), direction = Number(SliderKeyDirection[key]), diff = modifiedStep * direction, steps = (value() + diff) / step;
    return Number((step * steps).toFixed(3));
  }
  // -------------------------------------------------------------------------------------------
  // Document (Pointer Events)
  // -------------------------------------------------------------------------------------------
  Bg(event) {
    if (event.button !== 0)
      return;
    const value = this.pg(event);
    this.kg(value, event);
    this.tg(value, event);
  }
  Dg(event) {
    event.preventDefault();
  }
  Cg = functionThrottle(
    (event) => {
      this.kg(this.pg(event), event);
    },
    20,
    { leading: true }
  );
}

const sliderValueFormatContext = createContext(() => ({}));

const $$_templ$h = /* @__PURE__ */ $$_create_template(`<!$><div part="track"></div>`), $$_templ_2$6 = /* @__PURE__ */ $$_create_template(`<!$><div part="track track-fill"></div>`), $$_templ_3$1 = /* @__PURE__ */ $$_create_template(`<!$><div part="track track-progress"></div>`), $$_templ_4 = /* @__PURE__ */ $$_create_template(`<!$><div part="thumb-container"><!$><div part="thumb"></div></div>`);
class Slider extends Component {
  static el = defineElement({
    tagName: "media-slider",
    props: sliderProps,
    store: SliderStoreFactory
  });
  n;
  sb = false;
  qb = "";
  constructor(instance) {
    super(instance);
    provideContext(sliderValueFormatContext);
    this.n = useMedia();
    new SliderEventsController(instance, this, this.n);
    const focus = new FocusVisibleController(instance);
    this.$store.focused = focus.focused.bind(focus);
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "role", "slider");
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "aria-orientation", "horizontal");
    setAttributeIfEmpty(el, "autocomplete", "off");
    this.qb = el.getAttribute("aria-orientation") || "";
    if (!this.sb) {
      effect(this.tb.bind(this));
      effect(this.ub.bind(this));
    }
    effect(this.vb.bind(this));
    this.wb();
  }
  onConnect(el) {
    this.xb();
  }
  render() {
    const { trackClass, trackFillClass, trackProgressClass, thumbContainerClass, thumbClass } = this.$props;
    return [
      (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ$h);
        $$_effect(() => $$_attr($$_root, "class", trackClass()));
        return $$_root;
      })(),
      (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ_2$6);
        $$_effect(() => $$_attr($$_root, "class", trackFillClass()));
        return $$_root;
      })(),
      (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ_3$1);
        $$_effect(() => $$_attr($$_root, "class", trackProgressClass()));
        return $$_root;
      })(),
      (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ_4), $$_el = $$_next_element($$_walker);
        $$_effect(() => $$_attr($$_root, "class", thumbContainerClass()));
        $$_effect(() => $$_attr($$_el, "class", thumbClass()));
        return $$_root;
      })()
    ];
  }
  // -------------------------------------------------------------------------------------------
  // Props
  // -------------------------------------------------------------------------------------------
  yb() {
    return this.$props.step();
  }
  Ib() {
    return this.$props.keyStep();
  }
  Jb(value) {
    return Math.round(value);
  }
  pb() {
    return this.$props.disabled();
  }
  // -------------------------------------------------------------------------------------------
  // Watch
  // -------------------------------------------------------------------------------------------
  tb() {
    const { min, max } = this.$props;
    this.$store.min.set(min());
    this.$store.max.set(max());
  }
  ub() {
    if (!this.pb())
      return;
    const { dragging, pointing } = this.$store;
    dragging.set(false);
    pointing.set(false);
  }
  vb() {
    const { dragging, value, min, max } = this.$store;
    if (peek(dragging))
      return;
    value.set(getClampedValue(min(), max(), value(), this.yb()));
  }
  // -------------------------------------------------------------------------------------------
  // ARIA
  // -------------------------------------------------------------------------------------------
  zb() {
    return ariaBool$1(this.pb());
  }
  Ab() {
    return this.$props.min();
  }
  Bb() {
    return this.$props.max();
  }
  Cb() {
    const { value } = this.$store;
    return Math.round(value());
  }
  Db() {
    const { value, max } = this.$store;
    return round(value() / max() * 100, 2) + "%";
  }
  // -------------------------------------------------------------------------------------------
  // Attributes
  // -------------------------------------------------------------------------------------------
  wb() {
    const { disabled } = this.$props, { dragging, interactive, pointing } = this.$store;
    this.setAttributes({
      disabled,
      "data-dragging": dragging,
      "data-pointing": pointing,
      "data-interactive": interactive,
      "aria-disabled": this.zb.bind(this),
      "aria-valuemin": this.Ab.bind(this),
      "aria-valuemax": this.Bb.bind(this),
      "aria-valuenow": this.Cb.bind(this),
      "aria-valuetext": this.Db.bind(this),
      "data-styled": this.Eb.bind(this),
      "data-media-slider": true
    });
    effect(this.Fb.bind(this));
  }
  Eb() {
    return !!this.$props.trackClass();
  }
  Fb() {
    const { fillPercent, pointerPercent } = this.$store;
    this.Gb(round(fillPercent(), 3), round(pointerPercent(), 3));
  }
  Gb = animationFrameThrottle(
    (fillPercent, pointerPercent) => {
      this.el?.style.setProperty("--slider-fill-percent", fillPercent + "%");
      this.el?.style.setProperty("--slider-pointer-percent", pointerPercent + "%");
    }
  );
  // -------------------------------------------------------------------------------------------
  // Preview
  // -------------------------------------------------------------------------------------------
  ob = null;
  xb() {
    this.ob = this.el.querySelector('[slot="preview"]');
    if (!this.ob)
      return;
    effect(this.Hb.bind(this));
    Promise.resolve().then(function () { return preview; }).then(({ setupPreviewStyles }) => {
      setupPreviewStyles(this.ob, this.qb);
    });
  }
  Hb() {
    if (this.pb() || !this.ob)
      return;
    window.requestAnimationFrame(this.rb);
    const observer = new ResizeObserver(this.rb);
    observer.observe(this.ob);
    return () => observer.disconnect();
  }
  rb = animationFrameThrottle(() => {
    if (!this.ob)
      return;
    const rect = this.ob.getBoundingClientRect();
    setStyle(this.ob, "--computed-width", rect.width + "px");
    setStyle(this.ob, "--computed-height", rect.height + "px");
  });
  // -------------------------------------------------------------------------------------------
  // Events
  // -------------------------------------------------------------------------------------------
  Kb(event) {
  }
  Lb(event) {
  }
  Mb(event) {
  }
  Nb(event) {
  }
}

const $$_templ$g = /* @__PURE__ */ $$_create_template(`<!$><img part="img" loading="eager" decoding="async" aria-hidden="true" />`);
class Thumbnail extends Component {
  static el = defineElement({
    tagName: "media-thumbnail",
    props: { time: 0 }
  });
  n;
  ne = null;
  pe = null;
  qe = [];
  Sb = signal("");
  re = signal(false);
  se = signal(null);
  constructor(instance) {
    super(instance);
    this.n = useMedia();
  }
  onAttach() {
    this.setAttributes({
      "data-loading": this.Wb.bind(this),
      "aria-hidden": $ariaBool(this.mb.bind(this))
    });
  }
  onConnect() {
    effect(this.je.bind(this));
    effect(this.ve.bind(this));
    effect(this.we.bind(this));
  }
  je() {
    this.Sb();
    this.n.$store.thumbnails();
    this.re.set(false);
  }
  xe() {
    this.re.set(true);
    this.te();
  }
  Wb() {
    return !this.mb() && !this.re();
  }
  mb() {
    const { duration, thumbnailCues } = this.n.$store;
    return !Number.isFinite(duration()) || thumbnailCues().length === 0;
  }
  ve() {
    const { time } = this.$props, { duration, thumbnailCues } = this.n.$store, _cues = thumbnailCues(), _time = time();
    if (!_cues || !Number.isFinite(duration())) {
      this.se.set(null);
      return;
    }
    this.se.set(findActiveCue(_time, _cues));
  }
  ye(el) {
    this.ne = el;
  }
  we() {
    const activeCue = this.se(), thumbnails = peek(this.n.$store.thumbnails);
    if (!thumbnails || !activeCue) {
      this.Sb.set("");
      this.ue();
      return;
    }
    const [_src, _coords = ""] = (activeCue.text || "").split("#");
    this.pe = this.ze(_coords);
    if (!this.pe) {
      this.ue();
      return;
    }
    this.Sb.set(this.Ae(thumbnails, _src));
    this.te();
  }
  Ae(baseURL, src) {
    return !/https?:/.test(src) ? `${baseURL.split("/").slice(0, -1).join("/")}${src.replace(/^\/?/, "/")}`.replace(
      /^\/\//,
      "/"
    ) : src;
  }
  ze(coords) {
    const [props, values] = coords.split("="), resolvedCoords = {}, coordValues = values?.split(",");
    if (!props || !values)
      return null;
    for (let i = 0; i < props.length; i++)
      resolvedCoords[props[i]] = +coordValues[i];
    return resolvedCoords;
  }
  te = animationFrameThrottle(this.Be.bind(this));
  Be() {
    if (!this.ne || !this.pe || !this.el)
      return;
    const { w, h, x, y } = this.pe, { maxWidth, maxHeight, minWidth, minHeight } = getComputedStyle(this.el), minRatio = Math.max(parseInt(minWidth) / w, parseInt(minHeight) / h), maxRatio = Math.min(parseInt(maxWidth) / w, parseInt(maxHeight) / h), scale = maxRatio < 1 ? maxRatio : minRatio > 1 ? minRatio : 1;
    this.oe(this.el, "--thumbnail-width", `${w * scale}px`);
    this.oe(this.el, "--thumbnail-height", `${h * scale}px`);
    this.oe(this.ne, "width", `${this.ne.naturalWidth * scale}px`);
    this.oe(this.ne, "height", `${this.ne.naturalHeight * scale}px`);
    this.oe(this.ne, "transform", `translate(-${x * scale}px, -${y * scale}px)`);
  }
  oe(el, name, value) {
    el.style.setProperty(name, value);
    this.qe.push(() => el.style.removeProperty(name));
  }
  ue() {
    for (const reset of this.qe)
      reset();
    this.qe = [];
  }
  render() {
    const { crossorigin } = this.n.$store;
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ$g);
      $$_effect(() => $$_attr($$_root, "src", this.Sb()));
      $$_effect(() => $$_attr($$_root, "crossorigin", crossorigin()));
      $$_listen($$_root, "load", this.xe.bind(this));
      $$_ref($$_root, this.ye.bind(this));
      return $$_root;
    })();
  }
}

const $$_templ$f = /* @__PURE__ */ $$_create_template(`<!$><media-thumbnail part="thumbnail" mk-d></media-thumbnail>`);
class SliderThumbnail extends Component {
  static el = defineElement({
    tagName: "media-slider-thumbnail"
  });
  static register = [Thumbnail];
  n;
  Ob;
  constructor(instance) {
    super(instance);
    this.n = useMedia();
    this.Ob = useStore(SliderStoreFactory);
  }
  Pb() {
    const { duration } = this.n.$store;
    return this.Ob.pointerRate() * duration();
  }
  render() {
    const time = this.Pb.bind(this);
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ$f);
      $$_effect(() => $$_attr($$_root, "time", time()));
      $$_setup_custom_element($$_root);
      return $$_root;
    })();
  }
}

const $$_templ$e = /* @__PURE__ */ $$_create_template(`<!$><video muted="" playsinline="" preload="auto" part="video" style="max-width: unset"></video>`);
class SliderVideo extends Component {
  static el = defineElement({
    tagName: "media-slider-video",
    props: { src: void 0 }
  });
  n;
  Ob;
  ta = null;
  Qb = signal(false);
  Rb = signal(false);
  Sb;
  Tb;
  onAttach() {
    this.n = useMedia();
    this.Ob = useStore(SliderStoreFactory);
    this.Sb = computed(this.Vb.bind(this));
    this.Tb = computed(this.mb.bind(this));
    this.setAttributes({
      "data-loading": this.Wb.bind(this),
      "aria-hidden": $ariaBool(this.Tb)
    });
    effect(this.Xb.bind(this));
    effect(this.Yb.bind(this));
  }
  onConnect() {
    if (this.ta.readyState >= 2)
      this.Ub();
  }
  render() {
    const { crossorigin } = this.n.$store;
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ$e);
      $$_effect(() => $$_attr($$_root, "src", this.Sb()));
      $$_effect(() => $$_attr($$_root, "crossorigin", crossorigin()));
      $$_listen($$_root, "canplay", this.Ub.bind(this));
      $$_listen($$_root, "error", this.Zb.bind(this));
      $$_ref($$_root, this._b.bind(this));
      return $$_root;
    })();
  }
  Vb() {
    const { canLoad } = this.n.$store;
    return canLoad() ? this.$props.src() : null;
  }
  Wb() {
    return !this.Qb() && !this.Tb();
  }
  mb() {
    const { duration } = this.n.$store;
    return !!this.Rb() || !this.Qb() || !Number.isFinite(duration());
  }
  Xb() {
    this.Sb();
    this.Qb.set(false);
    this.Rb.set(false);
  }
  Ub(event) {
    this.Qb.set(true);
    this.dispatch("can-play", { trigger: event });
  }
  Zb(event) {
    this.Rb.set(true);
    this.dispatch("error", { trigger: event });
  }
  Yb() {
    const { duration } = this.n.$store;
    const { pointerRate } = this.Ob;
    if (this.Qb() && this.ta && Number.isFinite(duration()) && Number.isFinite(pointerRate())) {
      this.ta.currentTime = pointerRate() * duration();
    }
  }
  _b(el) {
    this.ta = el;
  }
}

function padNumberWithZeroes(num, expectedLength) {
  const str = String(num);
  const actualLength = str.length;
  const shouldPad = actualLength < expectedLength;
  if (shouldPad) {
    const padLength = expectedLength - actualLength;
    const padding = `0`.repeat(padLength);
    return `${padding}${num}`;
  }
  return str;
}
function parseTime(duration) {
  const hours = Math.trunc(duration / 3600);
  const minutes = Math.trunc(duration % 3600 / 60);
  const seconds = Math.trunc(duration % 60);
  const fraction = Number((duration - Math.trunc(duration)).toPrecision(3));
  return {
    hours,
    minutes,
    seconds,
    fraction
  };
}
function formatTime(duration, shouldPadHours = false, shouldPadMinutes = false, shouldAlwaysShowHours = false) {
  const { hours, minutes, seconds } = parseTime(duration);
  const paddedHours = shouldPadHours ? padNumberWithZeroes(hours, 2) : hours;
  const paddedMinutes = shouldPadMinutes ? padNumberWithZeroes(minutes, 2) : minutes;
  const paddedSeconds = padNumberWithZeroes(seconds, 2);
  if (hours > 0 || shouldAlwaysShowHours) {
    return `${paddedHours}:${paddedMinutes}:${paddedSeconds}`;
  }
  return `${paddedMinutes}:${paddedSeconds}`;
}
function formatSpokenTime(duration) {
  const spokenParts = [];
  const { hours, minutes, seconds } = parseTime(duration);
  if (hours > 0) {
    spokenParts.push(`${hours} hour`);
  }
  if (minutes > 0) {
    spokenParts.push(`${minutes} min`);
  }
  if (seconds > 0 || spokenParts.length === 0) {
    spokenParts.push(`${seconds} sec`);
  }
  return spokenParts.join(" ");
}

const $$_templ$d = /* @__PURE__ */ $$_create_template(`<!$><span><!$></span>`);
class SliderValue extends Component {
  static el = defineElement({
    tagName: "media-slider-value",
    props: {
      type: "current",
      format: void 0,
      showHours: false,
      padHours: false,
      padMinutes: false,
      decimalPlaces: 2
    }
  });
  $b;
  ac;
  Ob;
  onAttach() {
    this.Ob = useStore(SliderStoreFactory);
    this.$b = useContext(sliderValueFormatContext);
    this.ac = computed(this.bc.bind(this));
  }
  bc() {
    const { type, format, decimalPlaces, padHours, padMinutes, showHours } = this.$props;
    const { value: sliderValue, pointerValue, min, max } = this.Ob;
    const value = type() === "current" ? sliderValue() : pointerValue();
    if (format() === "percent") {
      const range = max() - min();
      const percent = value / range * 100;
      return (this.$b.percent ?? round)(percent, decimalPlaces()) + "\uFE6A";
    } else if (format() === "time") {
      return (this.$b.time ?? formatTime)(value, padHours(), padMinutes(), showHours());
    } else {
      return this.$b.value?.(value) ?? value.toFixed(2);
    }
  }
  render() {
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ$d), $$_expr = $$_walker.nextNode();
      $$_insert_at_marker_lite($$_expr, this.ac);
      return $$_root;
    })();
  }
}

class VolumeSlider extends Slider {
  static el = defineElement({
    tagName: "media-volume-slider",
    props: {
      ...sliderProps,
      min: defineProp({ value: 0, attribute: false }),
      max: defineProp({ value: 100, attribute: false }),
      value: defineProp({ value: 100, attribute: false })
    },
    store: SliderStoreFactory
  });
  sb = true;
  onAttach(el) {
    setAttributeIfEmpty(el, "aria-label", "Media volume");
    super.onAttach(el);
    {
      canChangeVolume().then((canSet) => {
        if (!canSet)
          setAttribute(el, "aria-hidden", "true");
      });
    }
    effect(this.B.bind(this));
  }
  B() {
    const { muted, volume } = this.n.$store;
    const newValue = muted() ? 0 : volume() * 100;
    this.$store.value.set(newValue);
    this.dispatch("value-change", { detail: newValue });
  }
  cc = functionThrottle(this.dc.bind(this), 25);
  dc(event) {
    if (!event.trigger)
      return;
    const mediaVolume = round(event.detail / 100, 3);
    this.n.remote.changeVolume(mediaVolume, event);
  }
  Kb(event) {
    this.cc(event);
  }
  Nb(event) {
    this.cc(event);
  }
  Ab() {
    return 0;
  }
  Bb() {
    return 100;
  }
}

class ClassManager {
  Fg;
  Gg;
  Eg = /* @__PURE__ */ new Map();
  Hg = signal([]);
  constructor(el) {
    this.Fg = el.firstChild;
    this.Gg = new MutationObserver(this.Y.bind(this));
    this.Gg.observe(this.Fg, { subtree: true, childList: true });
    effect(this.Ig.bind(this));
    onDispose(this.Jg.bind(this));
  }
  Y(records) {
    const selector = Array.from(this.Eg.keys()).join(",");
    for (const record of records) {
      for (const node of record.addedNodes) {
        if (isDOMElement(node) && node.matches(selector))
          this.xc();
      }
    }
  }
  gc(selector, $class) {
    this.Eg.set(selector, $class);
    this.Hg.set((c) => [...c, $class]);
    return this;
  }
  xc = animationFrameThrottle(this.qa.bind(this));
  qa() {
    for (const [selector, classes] of this.Eg) {
      const _class = peek(classes);
      for (const el of this.Fg.querySelectorAll(selector)) {
        setAttribute(el, "class", _class);
      }
    }
  }
  Ig() {
    for (const c of this.Hg())
      c();
    this.xc();
  }
  Jg() {
    this.Hg.set([]);
    this.Eg.clear();
    this.Gg.disconnect();
  }
}

const $$_templ$c = /* @__PURE__ */ $$_create_template(`<div part="chapters"></div>`), $$_templ_2$5 = /* @__PURE__ */ $$_create_template(`<div part="chapter-container"><div part="chapter"><div part="track"></div><div part="track track-fill" style="width: 0%"></div><div part="track track-progress" style="width: 0%"></div></div></div>`);
class SliderChaptersRenderer {
  constructor(_media, _slider, _onChange) {
    this.n = _media;
    this.Ob = _slider;
    this.Pc = _onChange;
  }
  Kg = [];
  Mg = [];
  Lg = 0;
  Ng = 0;
  render(cues, $class) {
    return cues?.length ? $$_peek(
      () => (() => {
        const $$_root = $$_clone($$_templ$c);
        $$_effect(() => $$_attr($$_root, "class", $class()));
        $$_insert_lite($$_root, () => this.Sg(cues));
        return $$_root;
      })()
    ) : null;
  }
  Sg(cues) {
    this.Kg = this.Tg(cues);
    const firstChapter = this.Kg[0];
    this.Pc(firstChapter.startTime === 0 ? firstChapter.text : "");
    for (let i = 0; i < this.Kg.length; i++)
      this.Mg.push(this.Ug());
    this.Vg();
    effect(this.Wg.bind(this));
    effect(this.Xg.bind(this));
    effect(this.Yg.bind(this));
    onDispose(() => {
      this.Mg = [];
      this.Lg = 0;
      this.Ng = 0;
    });
    return this.Mg;
  }
  Ug() {
    return $$_clone($$_templ_2$5);
  }
  Pg(container) {
    return container.firstChild.firstChild.nextSibling;
  }
  Zg(container) {
    return container.firstChild.lastChild;
  }
  _g() {
    return this.Kg[this.Kg.length - 1].endTime;
  }
  Vg() {
    let cue, endTime = this._g();
    for (let i = 0; i < this.Kg.length; i++) {
      cue = this.Kg[i];
      this.Mg[i].style.width = round((cue.endTime - cue.startTime) / endTime * 100, 3) + "%";
    }
  }
  Wg() {
    let { fillPercent, value, pointing } = this.Ob, currentChapter = this.Kg[this.Lg], activeIndex = this.Qg(
      currentChapter.startTime <= peek(value) ? this.Lg : 0,
      fillPercent()
    );
    if (activeIndex > this.Lg) {
      this.Rg(this.Lg, activeIndex, "100%");
    } else if (activeIndex < this.Lg) {
      this.Rg(activeIndex + 1, this.Lg + 1, "0%");
    }
    if (!peek(pointing) && this.Lg !== activeIndex) {
      this.Pc(this.Kg[activeIndex].text);
    }
    let trackFill = this.Pg(this.Mg[activeIndex]), percent = this.Og(this.Kg[activeIndex], fillPercent()) + "%";
    if (trackFill.style.width !== percent)
      trackFill.style.width = percent;
    this.Lg = activeIndex;
  }
  Xg() {
    let { pointing, pointerPercent } = this.Ob;
    if (!pointing())
      return;
    const activeIndex = this.Qg(0, pointerPercent());
    this.Pc(this.Kg[activeIndex].text);
  }
  Rg(start, end, width) {
    for (let i = start; i < end; i++)
      this.Pg(this.Mg[i]).style.width = width;
  }
  Qg(startIndex, percent) {
    let chapterPercent = 0;
    for (let i = startIndex; i < this.Kg.length; i++) {
      chapterPercent = this.Og(this.Kg[i], percent);
      if (chapterPercent >= 0 && chapterPercent < 100)
        return i;
    }
    return 0;
  }
  Yg() {
    this.$g(this.ah());
  }
  $g = animationFrameThrottle((bufferedPercent) => {
    let width;
    for (let i = this.Ng; i < this.Mg.length; i++) {
      width = this.Og(this.Kg[i], bufferedPercent);
      this.Zg(this.Mg[i]).style.width = width + "%";
      if (width < 100) {
        this.Ng = i;
        break;
      }
    }
  });
  ah = computed(this.bh.bind(this));
  bh() {
    const { bufferedEnd, duration } = this.n;
    return round(Math.min(bufferedEnd() / Math.max(duration(), 1), 1), 3) * 100;
  }
  Og(cue, percent) {
    const lastChapter = this.Kg[this.Kg.length - 1], startPercent = cue.startTime / lastChapter.endTime * 100, endPercent = cue.endTime / lastChapter.endTime * 100;
    return Math.max(
      0,
      round(
        percent >= endPercent ? 100 : (percent - startPercent) / (endPercent - startPercent) * 100,
        3
      )
    );
  }
  Tg(cues) {
    const chapters = [];
    for (let i = 0; i < cues.length - 1; i++) {
      const currentCue = cues[i], nextCue = cues[i + 1];
      chapters.push(currentCue);
      if (nextCue) {
        const timeDiff = nextCue.startTime - currentCue.endTime;
        if (timeDiff > 0) {
          chapters.push(new window.VTTCue(currentCue.endTime, currentCue.endTime + timeDiff, ""));
        }
      }
    }
    chapters.push(cues[cues.length - 1]);
    return chapters;
  }
}

class TimeSlider extends Slider {
  static el = defineElement({
    tagName: "media-time-slider",
    props: {
      ...sliderProps,
      min: defineProp({ value: 0, attribute: false }),
      max: defineProp({ value: 100, attribute: false }),
      value: defineProp({ value: 0, attribute: false }),
      pauseWhileDragging: false,
      seekingRequestThrottle: 100,
      chaptersClass: null,
      chapterContainerClass: null,
      chapterClass: null
    },
    store: SliderStoreFactory
  });
  sb = true;
  wc = true;
  hc;
  Ba = signal(null);
  jc;
  kc;
  constructor(instance) {
    super(instance);
    provideContext(sliderValueFormatContext, {
      value: this.mc.bind(this),
      time: this.nc.bind(this)
    });
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "aria-label", "Media time");
    super.onAttach(el);
    this.jc = new SliderChaptersRenderer(
      this.n.$store,
      this.$store,
      this.lc.set
    );
    this.setAttributes({
      "data-chapters": this.oc.bind(this)
    });
    this.setStyles({
      "--media-buffered-percent": this.pc.bind(this)
    });
    effect(this.C.bind(this));
    effect(this.qc.bind(this));
    effect(this.rc.bind(this));
    scopedRaf(() => {
      effect(this.sc.bind(this));
    });
  }
  pc() {
    const { bufferedEnd, duration } = this.n.$store;
    return round(Math.min(bufferedEnd() / Math.max(duration(), 1), 1) * 100, 3) + "%";
  }
  oc() {
    const { duration } = this.n.$store;
    this.kc?.xc();
    return this.Ba()?.cues.length && Number.isFinite(duration()) && duration() > 0;
  }
  onConnect(el) {
    super.onConnect(el);
    this.Ja();
    listenEvent(this.n.textTracks, "mode-change", this.Ja.bind(this));
    const { chapterContainerClass, chapterClass, trackClass, trackFillClass, trackProgressClass } = this.$props;
    this.kc = new ClassManager(el).gc('[part="chapter-container"]', chapterContainerClass).gc('[part="chapter"]', chapterClass).gc('[part="track"]', trackClass).gc('[part~="track-fill"]', trackFillClass).gc('[part~="track-progress"]', trackProgressClass);
  }
  render() {
    const tracks = super.render(), { chaptersClass } = this.$props;
    return [$$_computed(() => this.jc.render(this.Ba()?.cues, chaptersClass)), tracks];
  }
  qc() {
    this.hc = functionThrottle(
      this.cb.bind(this),
      this.$props.seekingRequestThrottle()
    );
  }
  C() {
    const { currentTime } = this.n.$store, { value, dragging } = this.$store, newValue = this.tc(currentTime());
    if (!peek(dragging)) {
      value.set(newValue);
      this.dispatch("value-change", { detail: newValue });
    }
  }
  sc() {
    const player = this.n.player;
    player && this.ob && setAttribute(player, "data-preview", this.$store.interactive());
  }
  cb(time, event) {
    this.n.remote.seeking(time, event);
  }
  uc(time, percent, event) {
    this.hc.cancel();
    const { live } = this.n.$store;
    if (live() && percent >= 99) {
      this.n.remote.seekToLiveEdge(event);
      return;
    }
    this.n.remote.seek(time, event);
  }
  ic = false;
  Lb(event) {
    const { pauseWhileDragging } = this.$props;
    if (pauseWhileDragging()) {
      const { paused } = this.n.$store;
      this.ic = !paused();
      this.n.remote.pause(event);
    }
  }
  Nb(event) {
    this.hc(this.ec(event.detail), event);
  }
  Mb(event) {
    const percent = event.detail;
    this.uc(this.ec(percent), percent, event);
    const { pauseWhileDragging } = this.$props;
    if (pauseWhileDragging() && this.ic) {
      this.n.remote.play(event);
      this.ic = false;
    }
  }
  Kb(event) {
    const { dragging } = this.$store;
    if (dragging() || !event.trigger)
      return;
    this.Mb(event);
  }
  // -------------------------------------------------------------------------------------------
  // Props
  // -------------------------------------------------------------------------------------------
  yb() {
    const value = this.$props.step() / this.n.$store.duration() * 100;
    return Number.isFinite(value) ? value : 1;
  }
  Ib() {
    const value = this.$props.keyStep() / this.n.$store.duration() * 100;
    return Number.isFinite(value) ? value : 1;
  }
  Jb(value) {
    return round(value, 3);
  }
  pb() {
    const { canSeek } = this.n.$store;
    return super.pb() || !canSeek();
  }
  // -------------------------------------------------------------------------------------------
  // ARIA
  // -------------------------------------------------------------------------------------------
  Ab() {
    return 0;
  }
  Bb() {
    return 100;
  }
  Db() {
    const time = this.ec(this.$store.value()), { duration } = this.n.$store;
    return Number.isFinite(time) ? `${formatSpokenTime(time)} out of ${formatSpokenTime(duration())}` : "live";
  }
  // -------------------------------------------------------------------------------------------
  // Format
  // -------------------------------------------------------------------------------------------
  ec(percent) {
    const { duration } = this.n.$store;
    return Math.round(percent / 100 * duration());
  }
  tc(time) {
    const { liveEdge, duration } = this.n.$store, rate = Math.max(0, Math.min(1, liveEdge() ? 1 : Math.min(time, duration()) / duration()));
    return Number.isNaN(rate) ? 0 : Number.isFinite(rate) ? rate * 100 : 100;
  }
  mc(percent) {
    const time = this.ec(percent), { live, duration } = this.n.$store;
    return Number.isFinite(time) ? (live() ? time - duration() : time).toFixed(0) : "LIVE";
  }
  nc(percent, padHours, padMinutes, showHours) {
    const time = this.ec(percent), { live, duration } = this.n.$store, value = live() ? time - duration() : time;
    return Number.isFinite(time) ? `${value < 0 ? "-" : ""}${formatTime(
      Math.abs(value),
      padHours,
      isNull(padMinutes) ? Math.abs(value) >= 3600 : padMinutes,
      showHours
    )}` : "LIVE";
  }
  // -------------------------------------------------------------------------------------------
  // Chapters
  // -------------------------------------------------------------------------------------------
  fc = null;
  lc = signal("");
  Ja() {
    onTrackChapterChange(this.n.textTracks, peek(this.Ba), this.Ba.set);
  }
  rc() {
    this.Ba();
    this.fc = this.el?.querySelector('[part="chapter-title"]') ?? null;
    if (!this.fc)
      return;
    effect(this.vc.bind(this));
    return () => {
      this.fc.textContent = "";
      this.fc = null;
    };
  }
  vc() {
    this.fc.textContent = this.lc();
  }
}

const menuContext = createContext();

const FOCUSABLE_ELEMENTS_SELECTOR = /* @__PURE__ */ [
  "a[href]",
  "[tabindex]",
  "input",
  "select",
  "button"
].map((selector) => `${selector}:not([aria-hidden])`).join(",");
const VALID_KEYS = /* @__PURE__ */ new Set([
  "Escape",
  "Tab",
  "ArrowUp",
  "ArrowDown",
  "Home",
  "PageUp",
  "End",
  "PageDown",
  "Enter",
  " "
]);
class MenuFocusController {
  constructor(_delegate) {
    this.jg = _delegate;
  }
  Cd = 0;
  dh = null;
  ch = [];
  get d() {
    return this.ch;
  }
  ld(el) {
    listenEvent(el, "focus", this.Ne.bind(this));
    this.dh = el;
  }
  kd() {
    if (!this.dh)
      return;
    this.qa();
    listenEvent(this.dh, "keyup", this.$a.bind(this));
    listenEvent(this.dh, "keydown", this.ab.bind(this));
    onDispose(() => {
      this.Cd = 0;
      this.ch = [];
    });
  }
  qa() {
    this.Cd = 0;
    this.ch = this.hh();
  }
  od(index = this.gh()) {
    const element = this.ch[index], container = this.jg.id();
    if (element && container) {
      requestAnimationFrame(() => {
        container.scrollTop = element.offsetTop - container.offsetHeight / 2 + element.offsetHeight / 2;
      });
    }
  }
  eh(index) {
    this.Cd = index;
    this.ch[index]?.focus();
    this.od(index);
  }
  gh() {
    return this.ch.findIndex((el) => el.getAttribute("aria-checked") === "true");
  }
  Ne() {
    setTimeout(() => {
      const index = this.gh();
      this.eh(index >= 0 ? index : 0);
    }, 100);
  }
  $a(event) {
    if (!VALID_KEYS.has(event.key))
      return;
    event.stopPropagation();
    event.preventDefault();
  }
  ab(event) {
    if (!VALID_KEYS.has(event.key))
      return;
    event.stopPropagation();
    event.preventDefault();
    switch (event.key) {
      case "Escape":
        this.jg.jd(event);
        break;
      case "Tab":
        this.eh(this.fh(event.shiftKey ? -1 : 1));
        break;
      case "ArrowUp":
        this.eh(this.fh(-1));
        break;
      case "ArrowDown":
        this.eh(this.fh(1));
        break;
      case "Home":
      case "PageUp":
        this.eh(0);
        break;
      case "End":
      case "PageDown":
        this.eh(this.ch.length - 1);
        break;
    }
  }
  fh(delta) {
    let index = this.Cd;
    do {
      index = (index + delta + this.ch.length) % this.ch.length;
    } while (this.ch[index].offsetParent === null);
    return index;
  }
  hh() {
    if (!this.dh)
      return [];
    const focusableElements = this.dh.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR), elements = [];
    const is = (node) => node.hasAttribute("data-media-menu-items");
    for (const el of focusableElements) {
      if (el instanceof HTMLElement && el.offsetParent !== null && // does not have display: none
      isElementParent(this.dh, el, is)) {
        elements.push(el);
      }
    }
    return elements;
  }
}

var __defProp$2 = Object.defineProperty;
var __getOwnPropDesc$2 = Object.getOwnPropertyDescriptor;
var __decorateClass$2 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$2(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$2(target, key, result);
  return result;
};
let idCount = 0;
class Menu extends Component {
  static el = defineElement({
    tagName: "media-menu",
    props: { position: null }
  });
  n;
  Jc;
  Kc;
  Ec = signal(false);
  Qc = signal(false);
  Rc = signal(false);
  Fc;
  Gc = /* @__PURE__ */ new Set();
  Lc = null;
  Dc = null;
  Ic = null;
  Hc;
  constructor(instance) {
    super(instance);
    this.n = useMedia();
    const currentIdCount = ++idCount;
    this.Jc = `media-menu-${currentIdCount}`;
    this.Kc = `media-menu-button-${currentIdCount}`;
    if (hasProvidedContext(menuContext)) {
      this.Fc = useContext(menuContext);
    }
    this.Hc = new MenuFocusController({
      id: this.Xc.bind(this),
      jd: this.close.bind(this)
    });
    provideContext(menuContext, {
      Ec: this.Ec,
      Ac: signal(""),
      Mc: this.Mc.bind(this),
      zc: this.zc.bind(this),
      Cc: this.Cc.bind(this),
      Sc: this.Sc.bind(this),
      Bc: this.Bc.bind(this),
      Nc: this.Nc.bind(this)
    });
  }
  onAttach(el) {
    const { position } = this.$props;
    this.setAttributes({
      position,
      "data-open": this.Ec,
      "data-submenu": !!this.Fc,
      "data-disabled": this.pb.bind(this),
      "data-media-menu": true
    });
  }
  onConnect(el) {
    if (!this.Fc) {
      effect(this.Tc.bind(this));
    }
    effect(this.Yc.bind(this));
    this.Fc?.Nc(el);
    requestAnimationFrame(() => this.s());
  }
  onDestroy() {
    this.Uc();
    this.Lc = null;
    this.Dc = null;
    this.Ic = null;
  }
  Uc() {
    if (!this.Dc || this.el?.contains(this.Dc))
      return;
    const menu = this.Dc?.parentElement;
    this.el.append(this.Dc);
    if (menu?.localName === "media-menu") {
      menu.destroy();
      menu.remove();
    }
  }
  Tc() {
    if (!this.el)
      return;
    const { breakpointX, breakpointY, viewType, orientation, fullscreen } = this.n.$store, popup = viewType() === "audio" ? breakpointX() === "sm" : breakpointY() === "sm";
    if (!this.Dc || this.Fc)
      return;
    setAttribute(this.el, "data-popup", popup);
    setAttribute(this.el, "data-popup-wide", popup && orientation() === "landscape");
    if (popup && !fullscreen()) {
      if (this.el.contains?.(this.Dc)) {
        const menu = this.el.cloneNode();
        menu.appendChild(this.Dc);
        requestAnimationFrame(() => {
          if (!this.el)
            return;
          const mediaRing = "--media-focus-ring", mediaRingValue = getComputedStyle(this.el).getPropertyValue(mediaRing);
          if (mediaRingValue)
            setStyle(menu, mediaRing, mediaRingValue);
        });
        scoped(() => {
          document.body.append(menu);
        }, this.n.scope);
      }
    }
    this.s();
    return () => this.Uc();
  }
  Yc() {
    const expanded = this.Vc();
    this.s();
    this.Wc(expanded);
    if (!expanded)
      return;
    this.Hc.kd();
    const closeTarget = this.Zc();
    if (closeTarget) {
      onPress(closeTarget, this._c.bind(this));
    }
    this.listen("pointerup", this.$c.bind(this));
    listenEvent(window, "pointerup", this.ad.bind(this));
  }
  zc(el) {
    const isMenuItem = !!this.Fc, isExpanded = this.Vc.bind(this), isARIAExpanded = $ariaBool(isExpanded), isARIADisabled = $ariaBool(this.pb.bind(this));
    setAttributeIfEmpty(el, "tabindex", isMenuItem ? "-1" : "0");
    setAttributeIfEmpty(el, "role", isMenuItem ? "menuitem" : "button");
    setAttribute(el, "id", this.Kc);
    setAttribute(el, "aria-controls", this.Jc);
    setAttribute(el, "aria-haspopup", "true");
    effect(() => {
      setAttribute(el, "aria-disabled", isARIADisabled());
      setAttribute(el, "aria-expanded", isARIAExpanded());
      if (!isMenuItem)
        setAttribute(el, "aria-pressed", isARIAExpanded());
      setAttribute(el, "data-pressed", isExpanded());
    });
    setAttribute(el, "data-media-button", !isMenuItem);
    setAttribute(el, "data-media-menu-button", "");
    onPress(el, this.bd.bind(this));
    this.Lc = el;
  }
  Cc(el) {
    setAttributeIfEmpty(el, "role", "menu");
    setAttributeIfEmpty(el, "tabindex", "-1");
    setAttribute(el, "id", this.Jc);
    setAttribute(el, "aria-describedby", this.Kc);
    setAttribute(el, "data-media-menu-items", "");
    this.Dc = el;
    this.Hc.ld(el);
    this.Tc();
    this.Wc(peek(this.Ec));
  }
  Sc(observer) {
    this.Ic = observer;
  }
  Wc(expanded) {
    if (this.Dc)
      setAttribute(this.Dc, "aria-hidden", ariaBool$1(!expanded));
  }
  Bc(disabled) {
    this.Rc.set(disabled);
  }
  bd(event) {
    if (this.Fc)
      event.stopPropagation();
    if (this.pb())
      return;
    this.Ec.set((expanded) => !expanded);
    this.Oc();
    tick();
    if (isKeyboardEvent(event)) {
      this.Dc?.focus();
    }
    this.Pc(event);
  }
  Pc(trigger) {
    const expanded = peek(this.Ec);
    this.dispatch(expanded ? "open" : "close", { trigger });
    if (expanded) {
      if (!this.Fc) {
        this.n.activeMenu?.close(trigger);
        this.n.activeMenu = this;
      }
      this.Ic?.md?.(trigger);
    } else {
      if (!this.Fc) {
        setTimeout(() => {
          for (const el of this.Gc)
            el.close(trigger);
        }, 300);
        this.n.activeMenu = null;
      }
      this.Ic?.nd?.(trigger);
    }
    if (expanded && !isKeyboardEvent(trigger)) {
      requestAnimationFrame(() => {
        this.Hc.qa();
        setTimeout(() => {
          this.Hc.od();
        }, 100);
      });
    }
  }
  Vc() {
    return !this.pb() && this.Ec();
  }
  pb() {
    return this.Qc() || this.Rc();
  }
  pd = this.Mc.bind(this);
  Mc(disabled) {
    this.Qc.set(disabled);
  }
  $c(event) {
    event.stopPropagation();
  }
  ad() {
    if (this.Fc)
      return setTimeout(this.close.bind(this), 800);
    else
      this.close();
  }
  _c(event) {
    event.stopPropagation();
    this.close(event);
  }
  Zc() {
    const target = this.el.querySelector('[slot="close-target"]');
    return isElementParent(this.el, target) ? target : null;
  }
  Xc() {
    if (!this.Fc) {
      return this.Dc;
    } else {
      let el = this.el;
      while (el && el.tagName !== "media-menu" && el.hasAttribute("data-submenu")) {
        el = el.parentNode;
      }
      return el;
    }
  }
  Oc(trigger) {
    if (this.Fc)
      return;
    if (this.Ec())
      this.n.remote.pauseUserIdle(trigger);
    else
      this.n.remote.resumeUserIdle(trigger);
  }
  Nc(el) {
    this.Gc.add(el);
    listenEvent(el, "open", this.cd);
    listenEvent(el, "close", this.dd);
    onDispose(this.ed);
  }
  ed = this.fd.bind(this);
  fd(el) {
    this.Gc.delete(el);
  }
  cd = this.gd.bind(this);
  gd(event) {
    for (const el of this.Gc) {
      if (el !== event.target)
        el.setAttribute("aria-hidden", "true");
    }
    this.s();
  }
  dd = this.hd.bind(this);
  hd() {
    for (const el of this.Gc)
      el.removeAttribute("aria-hidden");
    this.s();
  }
  s() {
    if (!this.Dc || false)
      return;
    let style = getComputedStyle(this.Dc), height = parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);
    let children = [...this.Dc.children];
    if (children[0]?.localName === "shadow-root") {
      children.push(...children[0].children);
    }
    for (const child of children) {
      height += child.offsetHeight;
    }
    requestAnimationFrame(() => {
      if (!this.Dc)
        return;
      setAttribute(this.Dc, "data-resizing", "");
      setTimeout(() => {
        if (!this.Dc)
          return;
        setAttribute(this.Dc, "data-resizing", false);
      }, 250);
      setStyle(this.Dc, "--menu-height", height + "px");
    });
  }
  open(trigger) {
    if (peek(this.Ec))
      return;
    this.Ec.set(true);
    tick();
    this.Pc(trigger);
    if (isKeyboardEvent(trigger)) {
      this.Dc?.focus();
    }
    this.Oc(trigger);
  }
  close(trigger) {
    if (!peek(this.Ec))
      return;
    this.Ec.set(false);
    tick();
    if (isKeyboardEvent(trigger)) {
      requestAnimationFrame(() => {
        this.Lc?.focus();
      });
    }
    this.Pc(trigger);
    this.Oc(trigger);
  }
}
__decorateClass$2([
  method
], Menu.prototype, "open", 1);
__decorateClass$2([
  method
], Menu.prototype, "close", 1);

class MenuButton extends Component {
  static el = defineElement({
    tagName: "media-menu-button",
    props: { disabled: false }
  });
  yc;
  constructor(instance) {
    super(instance);
    this.yc = useContext(menuContext);
    new FocusVisibleController(instance);
    new TooltipController(instance);
  }
  onAttach(el) {
    this.yc.zc(el);
    effect(this.ub.bind(this));
  }
  onConnect(el) {
    const hint = Array.from(el.querySelectorAll('[slot="hint"]')).pop();
    if (hint) {
      effect(() => {
        const text = this.yc.Ac();
        if (text)
          hint.textContent = text;
      });
    }
  }
  ub() {
    this.yc.Bc(this.$props.disabled());
  }
}

class MenuItems extends Component {
  static el = defineElement({
    tagName: "media-menu-items"
  });
  yc;
  constructor(instance) {
    super(instance);
    this.yc = useContext(menuContext);
    new FocusVisibleController(instance);
  }
  onAttach(el) {
    this.yc.Cc(el);
  }
}

const radioGroupContext = createContext();

var __defProp$1 = Object.defineProperty;
var __getOwnPropDesc$1 = Object.getOwnPropertyDescriptor;
var __decorateClass$1 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$1(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$1(target, key, result);
  return result;
};
class RadioGroup extends Component {
  static el = defineElement({
    tagName: "media-radio-group",
    props: { value: "" }
  });
  rd = /* @__PURE__ */ new Set();
  qd = signal("");
  get values() {
    return Array.from(this.rd).map((radio) => radio.qd());
  }
  get value() {
    return this.qd();
  }
  set value(value) {
    this.Pc(value);
  }
  constructor(instance) {
    super(instance);
    provideContext(radioGroupContext, {
      add: this.vd.bind(this),
      remove: this.wd.bind(this)
    });
  }
  onAttach(el) {
    const isMenuItem = hasProvidedContext(menuContext);
    if (!isMenuItem)
      setAttributeIfEmpty(el, "role", "radiogroup");
    this.sd();
    this.setAttributes({ value: this.qd });
  }
  onConnect() {
    effect(this.sd.bind(this));
  }
  onDestroy() {
    this.rd.clear();
  }
  vd(radio) {
    if (this.rd.has(radio))
      return;
    this.rd.add(radio);
    radio.xd = this.yd;
    radio.td(radio.qd() === this.qd());
  }
  wd(radio) {
    radio.xd = null;
    this.rd.delete(radio);
  }
  sd() {
    this.Pc(this.$props.value());
  }
  yd = this.Pc.bind(this);
  Pc(newValue, trigger) {
    const currentValue = peek(this.qd);
    if (!newValue || newValue === currentValue)
      return;
    const currentRadio = this.ud(currentValue), newRadio = this.ud(newValue);
    currentRadio?.td(false, trigger);
    newRadio?.td(true, trigger);
    this.qd.set(newValue);
    this.dispatch("change", { trigger });
  }
  ud(newValue) {
    for (const radio of this.rd) {
      if (newValue === peek(radio.qd))
        return radio;
    }
    return null;
  }
}
__decorateClass$1([
  prop
], RadioGroup.prototype, "values", 1);
__decorateClass$1([
  prop
], RadioGroup.prototype, "value", 1);

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
const $$_templ$b = /* @__PURE__ */ $$_create_template(`<!$><div part="check"></div>`);
class Radio extends Component {
  static el = defineElement({
    tagName: "media-radio",
    props: { value: "" }
  });
  zd = signal(false);
  Ad = {
    qd: this.$props.value,
    td: this.td.bind(this),
    xd: null
  };
  get checked() {
    return this.zd();
  }
  constructor(instance) {
    super(instance);
    new FocusVisibleController(instance);
  }
  onAttach() {
    effect(this.vb.bind(this));
    this.Bd();
    const isMenuItem = hasProvidedContext(menuContext);
    this.setAttributes({
      value: this.$props.value,
      role: isMenuItem ? "menuitemradio" : "radio",
      tabindex: isMenuItem ? -1 : 0,
      "aria-checked": $ariaBool(this.zd)
    });
  }
  onConnect(el) {
    this.Bd();
    onPress(el, this.jb.bind(this));
  }
  onDisconnect() {
    const group = useContext(radioGroupContext);
    group.remove(this.Ad);
  }
  Bd() {
    const group = useContext(radioGroupContext);
    group.add(this.Ad);
  }
  vb() {
    const { value } = this.$props, newValue = value();
    if (peek(this.zd)) {
      this.Ad.xd?.(newValue);
    }
  }
  jb(event) {
    if (peek(this.zd))
      return;
    this.zd.set(true);
    this.dispatch("change", { trigger: event });
    this.Ad.xd?.(peek(this.$props.value), event);
  }
  td(value, trigger) {
    if (peek(this.zd) === value)
      return;
    this.zd.set(value);
    this.dispatch("change", { trigger });
  }
  render() {
    return $$_next_template($$_templ$b);
  }
}
__decorateClass([
  prop
], Radio.prototype, "checked", 1);

const $$_templ$a = /* @__PURE__ */ $$_create_template(`<!$><media-radio-group mk-d><!$></media-radio-group>`), $$_templ_2$4 = /* @__PURE__ */ $$_create_template(`<!$><media-radio mk-d><!$></media-radio>`);
function renderRadioGroup(props) {
  const { value, onChange, radioGroupClass } = props;
  return (() => {
    const [$$_root, $$_walker] = $$_create_walker($$_templ$a), $$_expr = $$_walker.nextNode();
    $$_effect(() => $$_attr($$_root, "class", radioGroupClass()));
    $$_listen($$_root, "change", onChange);
    $$_scoped(() => {
      $$_insert_at_marker_lite($$_expr, () => renderOptions(props));
    }, $$_setup_custom_element($$_root, { value }));
    return $$_root;
  })();
}
function renderOptions(props) {
  const { options } = props;
  return options().map((option) => {
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ_2$4), $$_expr = $$_walker.nextNode();
      $$_attr($$_root, "part", props.part);
      $$_scoped(() => {
        $$_insert_at_marker_lite($$_expr, option.content);
      }, $$_setup_custom_element($$_root, { value: option.value }));
      return $$_root;
    })();
  });
}

const $$_templ$9 = /* @__PURE__ */ $$_create_template(`<!$><media-thumbnail part="thumbnail" mk-d></media-thumbnail>`), $$_templ_2$3 = /* @__PURE__ */ $$_create_template(`<!$><div part="content"><div part="title"><!$></div><div part="start-time"><!$></div><div part="duration"><!$></div></div>`);
class ChaptersMenuItems extends MenuItems {
  static el = defineElement({
    tagName: "media-chapters-menu-items",
    props: {
      containerClass: null,
      chapterClass: null,
      thumbnailClass: null,
      contentClass: null,
      titleClass: null,
      startTimeClass: null,
      durationClass: null
    }
  });
  static register = [Thumbnail, RadioGroup, Radio];
  n;
  Cd = signal(0);
  Ba = signal(null);
  constructor(instance) {
    super(instance);
    this.n = useMedia();
  }
  onAttach(el) {
    super.onAttach(el);
    this.yc.Sc({
      md: this.md.bind(this)
    });
    this.setAttributes({
      "data-thumbnails": this.Dd.bind(this)
    });
  }
  md() {
    peek(() => this.C());
  }
  onConnect(el) {
    effect(this.C.bind(this));
    effect(this.Ed.bind(this));
    this.Ja();
    listenEvent(this.n.textTracks, "mode-change", this.Ja.bind(this));
    const {
      chapterClass,
      thumbnailClass,
      contentClass,
      titleClass,
      startTimeClass,
      durationClass
    } = this.$props;
    new ClassManager(el).gc('[part="chapter"]', chapterClass).gc('[part="thumbnail"]', thumbnailClass).gc('[part="content"]', contentClass).gc('[part="title"]', titleClass).gc('[part="start-time"]', startTimeClass).gc('[part="duration"]', durationClass);
  }
  Dd() {
    const { thumbnailCues } = this.n.$store;
    return thumbnailCues().length > 0;
  }
  C() {
    if (!this.yc.Ec())
      return;
    const track = this.Ba();
    if (!track) {
      this.Cd.set(-1);
      return;
    }
    const { currentTime } = this.n.$store, time = currentTime(), activeCueIndex = track.cues.findIndex((cue) => isCueActive(cue, time));
    this.Cd.set(activeCueIndex);
    if (activeCueIndex >= 0) {
      const cue = track.cues[activeCueIndex], radio = this.el.querySelector(`shadow-root media-radio[aria-checked='true']`), playedPercent = (time - cue.startTime) / (cue.endTime - cue.startTime) * 100;
      radio && setStyle(radio, "--played-percent", round(playedPercent, 3) + "%");
    }
  }
  Ed() {
    this.yc.Mc(this.pb());
  }
  pb() {
    const track = this.Ba();
    return !track || !track.cues.length;
  }
  Pc(event) {
    if (this.pb() || !event.trigger)
      return;
    const index = +event.target.value, cues = this.Ba()?.cues;
    if (isNumber(index) && cues?.[index]) {
      this.Cd.set(index);
      this.n.remote.seek(cues[index].startTime, event);
    }
  }
  Ja() {
    onTrackChapterChange(this.n.textTracks, peek(this.Ba), this.Ba.set);
  }
  Fd() {
    return this.Cd() + "";
  }
  Gd() {
    const track = this.Ba();
    if (!track)
      return [];
    return track.cues.map((cue, i) => ({
      value: i + "",
      content: () => [
        (() => {
          const $$_signal = $$_computed(
            () => this.Dd() && (() => {
              const [$$_root, $$_walker] = $$_create_walker($$_templ$9);
              $$_setup_custom_element($$_root, { time: cue.startTime });
              return $$_root;
            })()
          );
          $$_signal();
          return $$_signal;
        })(),
        (() => {
          const [$$_root, $$_walker] = $$_create_walker($$_templ_2$3), $$_expr = $$_walker.nextNode(), $$_expr_2 = $$_walker.nextNode(), $$_expr_3 = $$_walker.nextNode();
          $$_insert_at_marker_lite($$_expr, cue.text);
          $$_insert_at_marker_lite($$_expr_2, () => formatTime(cue.startTime, false, cue.startTime >= 3600));
          $$_insert_at_marker_lite($$_expr_3, () => formatSpokenTime(cue.endTime - cue.startTime));
          return $$_root;
        })()
      ]
    }));
  }
  render() {
    const { containerClass } = this.$props;
    return renderRadioGroup({
      part: "chapter",
      value: this.Fd.bind(this),
      options: this.Gd.bind(this),
      radioGroupClass: containerClass,
      onChange: this.Pc.bind(this)
    });
  }
}

const $$_templ$8 = /* @__PURE__ */ $$_create_template(`<!$><span part="label"><!$></span>`);
class AudioMenuItems extends MenuItems {
  static el = defineElement({
    tagName: "media-audio-menu-items",
    props: {
      emptyLabel: "Default",
      radioClass: null,
      radioGroupClass: null,
      radioCheckClass: null
    }
  });
  static register = [RadioGroup, Radio];
  n;
  constructor(instance) {
    super(instance);
    this.n = useMedia();
  }
  onConnect(el) {
    effect(this.Ed.bind(this));
    effect(this.Hd.bind(this));
    const { radioClass, radioCheckClass } = this.$props;
    new ClassManager(el).gc("media-radio", radioClass).gc('[part="check"]', radioCheckClass);
  }
  Hd() {
    const { emptyLabel } = this.$props, { audioTrack } = this.n.$store, track = audioTrack();
    this.yc.Ac.set(track?.label ?? emptyLabel());
  }
  Ed() {
    this.yc.Mc(this.pb());
  }
  pb() {
    const { audioTracks } = this.n.$store;
    return audioTracks().length === 0;
  }
  Pc(event) {
    if (this.pb())
      return;
    const radioGroup = event.target;
    const value = radioGroup.value, index = this.n.audioTracks.toArray().findIndex((track) => track.label.toLowerCase() === value);
    if (index >= 0)
      this.n.remote.changeAudioTrack(index, event);
  }
  Fd() {
    const { audioTrack } = this.n.$store;
    const track = audioTrack();
    return track ? track.label.toLowerCase() : "";
  }
  Gd() {
    const { audioTracks } = this.n.$store;
    return audioTracks().map((track) => ({
      value: track.label.toLowerCase(),
      content: () => (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ$8), $$_expr = $$_walker.nextNode();
        $$_insert_at_marker_lite($$_expr, track.label);
        return $$_root;
      })()
    }));
  }
  render() {
    const { radioGroupClass } = this.$props;
    return renderRadioGroup({
      value: this.Fd.bind(this),
      options: this.Gd.bind(this),
      radioGroupClass,
      onChange: this.Pc.bind(this)
    });
  }
}

var Icon$51 = `<path fill-rule="evenodd" clip-rule="evenodd" d="M26.6667 5.99998C26.6667 5.63179 26.3682 5.33331 26 5.33331H11.3333C10.9651 5.33331 10.6667 5.63179 10.6667 5.99998V17.5714C10.6667 17.6694 10.5644 17.7342 10.4741 17.6962C9.91823 17.4625 9.30754 17.3333 8.66667 17.3333C6.08934 17.3333 4 19.4226 4 22C4 24.5773 6.08934 26.6666 8.66667 26.6666C11.244 26.6666 13.3333 24.5773 13.3333 22V8.66665C13.3333 8.29846 13.6318 7.99998 14 7.99998L23.3333 7.99998C23.7015 7.99998 24 8.29846 24 8.66665V14.9048C24 15.0027 23.8978 15.0675 23.8075 15.0296C23.2516 14.7958 22.6409 14.6666 22 14.6666C19.4227 14.6666 17.3333 16.756 17.3333 19.3333C17.3333 21.9106 19.4227 24 22 24C24.5773 24 26.6667 21.9106 26.6667 19.3333V5.99998ZM22 21.3333C23.1046 21.3333 24 20.4379 24 19.3333C24 18.2287 23.1046 17.3333 22 17.3333C20.8954 17.3333 20 18.2287 20 19.3333C20 20.4379 20.8954 21.3333 22 21.3333ZM8.66667 24C9.77124 24 10.6667 23.1045 10.6667 22C10.6667 20.8954 9.77124 20 8.66667 20C7.5621 20 6.66667 20.8954 6.66667 22C6.66667 23.1045 7.5621 24 8.66667 24Z" fill="currentColor"/>`;

var Icon$10 = `<path d="M13.0908 14.3334C12.972 14.3334 12.9125 14.1898 12.9965 14.1058L17.7021 9.40022C17.9625 9.13987 17.9625 8.71776 17.7021 8.45741L16.2879 7.04319C16.0275 6.78284 15.6054 6.78284 15.3451 7.04319L6.8598 15.5285C6.59945 15.7888 6.59945 16.2109 6.8598 16.4713L8.27401 17.8855L8.27536 17.8868L15.3453 24.9568C15.6057 25.2172 16.0278 25.2172 16.2881 24.9568L17.7024 23.5426C17.9627 23.2822 17.9627 22.8601 17.7024 22.5998L12.9969 17.8944C12.9129 17.8104 12.9724 17.6668 13.0912 17.6668L26 17.6668C26.3682 17.6668 26.6667 17.3683 26.6667 17.0001V15.0001C26.6667 14.6319 26.3682 14.3334 26 14.3334L13.0908 14.3334Z" fill="currentColor"/>`;

var Icon$18 = `<path d="M15.905 17.4809C15.9571 17.533 16.0415 17.533 16.0936 17.4809L22.4111 11.1635C22.6714 10.9031 23.0935 10.9031 23.3539 11.1635L24.9567 12.7662C25.217 13.0266 25.217 13.4487 24.9567 13.709L18.1028 20.5629C18.0937 20.5732 18.0842 20.5833 18.0744 20.5931L16.4716 22.1959C16.2113 22.4562 15.7892 22.4562 15.5288 22.1959L7.04353 13.7106C6.78318 13.4503 6.78318 13.0281 7.04353 12.7678L8.6463 11.165C8.90665 10.9047 9.32876 10.9047 9.58911 11.165L15.905 17.4809Z" fill="currentColor"/>`;

const $$_templ$7 = /* @__PURE__ */ $$_create_template(`<!$><span slot="label"><!$></span>`), $$_templ_2$2 = /* @__PURE__ */ $$_create_template(`<!$><div slot="hint"></div>`);
function renderMenuButtonContent({ label, iconPaths }) {
  return [
    $$_create_component(Icon, { slot: "close-icon", paths: Icon$10 }),
    $$_create_component(Icon, { slot: "icon", paths: iconPaths }),
    (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ$7), $$_expr = $$_walker.nextNode();
      $$_insert_at_marker_lite($$_expr, label);
      return $$_root;
    })(),
    $$_next_template($$_templ_2$2),
    $$_create_component(Icon, { slot: "open-icon", paths: Icon$18 })
  ];
}

class AudioMenuButton extends MenuButton {
  static el = defineElement({
    tagName: "media-audio-menu-button",
    props: { disabled: false, label: "Audio" }
  });
  render() {
    const { label } = this.$props;
    return renderMenuButtonContent({
      label,
      iconPaths: Icon$51
    });
  }
}

const $$_templ$6 = /* @__PURE__ */ $$_create_template(`<!$><span part="label"><!$></span>`), $$_templ_2$1 = $$_templ$6;
class CaptionsMenuItems extends MenuItems {
  static el = defineElement({
    tagName: "media-captions-menu-items",
    props: {
      offLabel: "Off",
      radioClass: null,
      radioGroupClass: null,
      radioCheckClass: null
    }
  });
  static register = [RadioGroup, Radio];
  n;
  constructor(instance) {
    super(instance);
    this.n = useMedia();
  }
  onConnect(el) {
    effect(this.Ed.bind(this));
    effect(this.Hd.bind(this));
    const { radioClass, radioCheckClass } = this.$props;
    new ClassManager(el).gc("media-radio", radioClass).gc('[part="check"]', radioCheckClass);
  }
  Hd() {
    const { offLabel } = this.$props, { textTrack } = this.n.$store, track = textTrack();
    this.yc.Ac.set(
      track && isTrackCaptionKind(track) && track.mode === "showing" ? track.label : offLabel()
    );
  }
  Ed() {
    this.yc.Mc(this.pb());
  }
  pb() {
    const { textTracks } = this.n.$store;
    return textTracks().filter(isTrackCaptionKind).length === 0;
  }
  Pc(event) {
    if (this.pb())
      return;
    const radioGroup = event.target;
    const value = radioGroup.value;
    if (value === "off") {
      const track = this.n.textTracks.selected;
      if (track) {
        const index2 = this.n.textTracks.toArray().indexOf(track);
        this.n.remote.changeTextTrackMode(index2, "disabled", event);
      }
      return;
    }
    const index = this.n.textTracks.toArray().findIndex((track) => track.label.toLowerCase() === value);
    if (index >= 0)
      this.n.remote.changeTextTrackMode(index, "showing", event);
  }
  Fd() {
    const { textTrack, textTracks } = this.n.$store, track = textTrack();
    return track && isTrackCaptionKind(track) && track.mode === "showing" ? track.label.toLowerCase() : "off";
  }
  Gd() {
    const { offLabel } = this.$props, { textTracks } = this.n.$store;
    return [
      { value: "off", content: () => (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ$6), $$_expr = $$_walker.nextNode();
        $$_insert_at_marker_lite($$_expr, offLabel);
        return $$_root;
      })() },
      ...textTracks().filter(isTrackCaptionKind).map((track) => ({
        value: track.label.toLowerCase(),
        content: () => (() => {
          const [$$_root, $$_walker] = $$_create_walker($$_templ_2$1), $$_expr = $$_walker.nextNode();
          $$_insert_at_marker_lite($$_expr, track.label);
          return $$_root;
        })()
      }))
    ];
  }
  render() {
    const { radioGroupClass } = this.$props;
    return renderRadioGroup({
      value: this.Fd.bind(this),
      options: this.Gd.bind(this),
      radioGroupClass,
      onChange: this.Pc.bind(this)
    });
  }
}

class CaptionsMenuButton extends MenuButton {
  static el = defineElement({
    tagName: "media-captions-menu-button",
    props: { disabled: false, label: "Captions" }
  });
  render() {
    const { label } = this.$props;
    return renderMenuButtonContent({
      label,
      iconPaths: Icon$25
    });
  }
}

const $$_templ$5 = /* @__PURE__ */ $$_create_template(`<!$><span part="label"><!$></span>`);
class PlaybackRateMenuItems extends MenuItems {
  static el = defineElement({
    tagName: "media-playback-rate-menu-items",
    props: {
      normalLabel: "Normal",
      rates: [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],
      radioGroupClass: null,
      radioClass: null,
      radioCheckClass: null
    }
  });
  static register = [RadioGroup, Radio];
  n;
  constructor(instance) {
    super(instance);
    this.n = useMedia();
  }
  onConnect(el) {
    effect(this.Hd.bind(this));
    const { radioClass, radioCheckClass } = this.$props;
    new ClassManager(el).gc("media-radio", radioClass).gc('[part="check"]', radioCheckClass);
  }
  Hd() {
    const { normalLabel } = this.$props, { playbackRate } = this.n.$store, rate = playbackRate();
    this.yc.Ac.set(rate === 1 ? normalLabel() : rate + "\xD7");
  }
  Pc(event) {
    const radioGroup = event.target;
    this.n.remote.changePlaybackRate(+radioGroup.value, event);
  }
  Fd() {
    const { playbackRate } = this.n.$store;
    return playbackRate() + "";
  }
  Gd() {
    const { rates, normalLabel } = this.$props;
    return rates().map((rate) => ({
      value: rate + "",
      content: () => (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ$5), $$_expr = $$_walker.nextNode();
        $$_insert_at_marker_lite($$_expr, () => rate === 1 ? normalLabel() : rate + "\xD7");
        return $$_root;
      })()
    }));
  }
  render() {
    const { radioGroupClass } = this.$props;
    return renderRadioGroup({
      value: this.Fd.bind(this),
      options: this.Gd.bind(this),
      radioGroupClass,
      onChange: this.Pc.bind(this)
    });
  }
}

var Icon$55 = `<path d="M25.14 25.1089C25.0171 25.2532 24.8356 25.3333 24.646 25.3333H22.8124C22.1084 25.3333 21.7734 24.1872 22.2745 23.6927C23.9161 22.0729 24.9336 19.822 24.9336 17.3333C24.9336 12.3997 20.9336 8.39973 16 8.39973C11.0664 8.39973 7.06641 12.3997 7.06641 17.3333C7.06641 19.822 8.08389 22.0729 9.72555 23.6927C10.2266 24.1872 9.89155 25.3333 9.18762 25.3333H7.35398C7.16436 25.3333 6.98294 25.2532 6.86001 25.1089C5.07703 23.015 4 20.2991 4 17.3333C4 10.7057 9.3724 5.33333 16 5.33333C22.6276 5.33333 28 10.7057 28 17.3333C28 20.2991 26.923 23.015 25.14 25.1089Z" fill="currentColor"/> <path d="M21.1992 14.3399C21.4595 14.0796 21.4595 13.6575 21.1992 13.3971L20.2564 12.4543C19.996 12.194 19.5739 12.194 19.3136 12.4543L16.4492 15.3187C16.4185 15.3493 16.3749 15.3629 16.332 15.3568C16.2236 15.3414 16.1127 15.3334 16 15.3334C14.7113 15.3334 13.6667 16.378 13.6667 17.6667C13.6667 18.9554 14.7113 20 16 20C17.2887 20 18.3333 18.9554 18.3333 17.6667C18.3333 17.5464 18.3242 17.4283 18.3067 17.313C18.3001 17.2696 18.3136 17.2255 18.3446 17.1945L21.1992 14.3399Z" fill="currentColor"/>`;

class PlaybackRateMenuButton extends MenuButton {
  static el = defineElement({
    tagName: "media-playback-rate-menu-button",
    props: { disabled: false, label: "Speed" }
  });
  render() {
    const { label } = this.$props;
    return renderMenuButtonContent({
      label,
      iconPaths: Icon$55
    });
  }
}

const $$_templ$4 = /* @__PURE__ */ $$_create_template(`<!$><span><!$></span>`), $$_templ_2 = /* @__PURE__ */ $$_create_template(`<!$><span part="label"><!$></span>`), $$_templ_3 = /* @__PURE__ */ $$_create_template(`<!$><span part="info"><!$></span>`);
class QualityMenuItems extends MenuItems {
  static el = defineElement({
    tagName: "media-quality-menu-items",
    props: {
      autoLabel: "Auto",
      hideBitrate: false,
      radioGroupClass: null,
      radioClass: null,
      radioCheckClass: null
    }
  });
  static register = [RadioGroup, Radio];
  n;
  Jd = computed(() => {
    const { qualities } = this.n.$store;
    return [...qualities()].sort(
      (a, b) => b.height === a.height ? b.bitrate - a.bitrate : b.height - a.height
    );
  });
  constructor(instance) {
    super(instance);
    this.n = useMedia();
  }
  onConnect(el) {
    effect(this.Ed.bind(this));
    effect(this.Hd.bind(this));
    const { radioClass, radioCheckClass } = this.$props;
    new ClassManager(el).gc("media-radio", radioClass).gc('[part="check"]', radioCheckClass);
  }
  Hd() {
    const { autoLabel } = this.$props, { autoQuality, quality } = this.n.$store, qualityText = quality() ? quality().height + "p" : "";
    this.yc.Ac.set(!autoQuality() ? qualityText : autoLabel() + ` (${qualityText})`);
  }
  Ed() {
    const { qualities } = this.n.$store;
    this.yc.Mc(qualities().length === 0);
  }
  pb() {
    const { canSetQuality, qualities } = this.n.$store;
    return !canSetQuality() || qualities().length === 0;
  }
  Pc(event) {
    if (this.pb())
      return;
    const radioGroup = event.target, value = radioGroup.value;
    if (value === "auto") {
      this.n.remote.changeQuality(-1, event);
      return;
    }
    const { qualities } = this.n.$store, index = peek(qualities).findIndex((quality) => this.Id(quality) === value);
    if (index >= 0)
      this.n.remote.changeQuality(index, event);
  }
  Fd() {
    const { quality, autoQuality } = this.n.$store;
    if (autoQuality())
      return "auto";
    const currentQuality = quality();
    return currentQuality ? this.Id(currentQuality) : "auto";
  }
  Id(quality) {
    return quality.height + "_" + quality.bitrate;
  }
  Gd() {
    const { autoLabel, hideBitrate } = this.$props;
    return [
      { value: "auto", content: () => (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ$4), $$_expr = $$_walker.nextNode();
        $$_insert_at_marker_lite($$_expr, autoLabel);
        return $$_root;
      })() },
      ...this.Jd().map((quality) => {
        const rate = `${round(quality.bitrate / 1e6, 2)} Mbps`;
        return {
          value: this.Id(quality),
          content: () => [
            (() => {
              const [$$_root, $$_walker] = $$_create_walker($$_templ_2), $$_expr = $$_walker.nextNode();
              $$_insert_at_marker_lite($$_expr, quality.height + "p");
              return $$_root;
            })(),
            (() => {
              const $$_signal = $$_computed(
                () => !hideBitrate() && (() => {
                  const [$$_root, $$_walker] = $$_create_walker($$_templ_3), $$_expr = $$_walker.nextNode();
                  $$_insert_at_marker_lite($$_expr, rate);
                  return $$_root;
                })()
              );
              $$_signal();
              return $$_signal;
            })()
          ]
        };
      })
    ];
  }
  render() {
    const { radioGroupClass } = this.$props;
    return renderRadioGroup({
      value: this.Fd.bind(this),
      options: this.Gd.bind(this),
      radioGroupClass,
      onChange: this.Pc.bind(this)
    });
  }
}

var Icon$83 = `<path d="M18.6669 10.4001C18.6669 10.7683 18.3684 11.0667 18.0002 11.0667H16.2668C15.8987 11.0667 15.6002 10.7683 15.6002 10.4001V9.86674C15.6002 9.7931 15.5405 9.73341 15.4669 9.73341H5.99998C5.63179 9.73341 5.33331 9.43493 5.33331 9.06674V7.33341C5.33331 6.96522 5.63179 6.66674 5.99998 6.66674H15.4669C15.5405 6.66674 15.6002 6.60704 15.6002 6.53341V6.00007C15.6002 5.63188 15.8987 5.3334 16.2668 5.3334H18.0002C18.3684 5.3334 18.6669 5.63188 18.6669 6.00007V10.4001Z" fill="currentColor"/> <path d="M11.3334 18.8668C11.7016 18.8668 12.0001 18.5683 12.0001 18.2001V13.8001C12.0001 13.4319 11.7016 13.1335 11.3334 13.1335H9.60006C9.23187 13.1335 8.93339 13.4319 8.93339 13.8001V14.3335C8.93339 14.4071 8.8737 14.4668 8.80006 14.4668H6.00006C5.63187 14.4668 5.33339 14.7653 5.33339 15.1335V16.8668C5.33339 17.235 5.63187 17.5335 6.00006 17.5335H8.80006C8.8737 17.5335 8.93339 17.5932 8.93339 17.6668V18.2001C8.93339 18.5683 9.23187 18.8668 9.60006 18.8668H11.3334Z" fill="currentColor"/> <path d="M18.6667 26.0001C18.6667 26.3683 18.3682 26.6668 18 26.6668H16.2667C15.8985 26.6668 15.6 26.3683 15.6 26.0001V25.4668C15.6 25.3931 15.5403 25.3334 15.4667 25.3334H6.00014C5.63195 25.3334 5.33348 25.0349 5.33348 24.6668V22.9334C5.33348 22.5652 5.63195 22.2668 6.00014 22.2668H15.4667C15.5403 22.2668 15.6 22.2071 15.6 22.1334V21.6001C15.6 21.2319 15.8985 20.9334 16.2667 20.9334H18C18.3682 20.9334 18.6667 21.2319 18.6667 21.6001V26.0001Z" fill="currentColor"/> <path d="M22 24.6668C22 25.0349 22.2985 25.3334 22.6667 25.3334H26.0001C26.3683 25.3334 26.6668 25.0349 26.6668 24.6668V22.9334C26.6668 22.5652 26.3683 22.2668 26.0001 22.2668H22.6667C22.2985 22.2668 22 22.5652 22 22.9334V24.6668Z" fill="currentColor"/> <path d="M16.0001 17.5335C15.6319 17.5335 15.3334 17.235 15.3334 16.8668V15.1335C15.3334 14.7653 15.6319 14.4668 16.0001 14.4668H26.0001C26.3683 14.4668 26.6667 14.7653 26.6667 15.1335V16.8668C26.6667 17.235 26.3683 17.5335 26.0001 17.5335H16.0001Z" fill="currentColor"/> <path d="M22.0002 9.06674C22.0002 9.43493 22.2987 9.73341 22.6669 9.73341H26C26.3682 9.73341 26.6666 9.43493 26.6666 9.06674V7.3334C26.6666 6.96521 26.3682 6.66674 26 6.66674H22.6669C22.2987 6.66674 22.0002 6.96522 22.0002 7.33341V9.06674Z" fill="currentColor"/>`;

class QualityMenuButton extends MenuButton {
  static el = defineElement({
    tagName: "media-quality-menu-button",
    props: { disabled: false, label: "Quality" }
  });
  render() {
    const { label } = this.$props;
    return renderMenuButtonContent({
      label,
      iconPaths: Icon$83
    });
  }
}

class Gesture extends Component {
  static el = defineElement({
    tagName: "media-gesture",
    props: {
      event: void 0,
      action: void 0
    }
  });
  n;
  Md = null;
  onAttach() {
    const { event, action } = this.$props;
    this.setAttributes({
      event,
      action
    });
  }
  onConnect() {
    this.n = useMedia();
    scopedRaf(() => {
      this.Md = this.n.player.querySelector("media-outlet");
      effect(this.Pd.bind(this));
    });
  }
  Pd() {
    let eventType = this.$props.event();
    if (!this.Md || !eventType)
      return;
    if (/^dbl/.test(eventType)) {
      eventType = eventType.split(/^dbl/)[1];
    }
    listenEvent(this.Md, eventType, this.Qd.bind(this));
  }
  Ld = 0;
  Nd = -1;
  Qd(event) {
    if (!this.Rd(event) || isPointerEvent(event) && (event.button !== 0 || this.n.activeMenu)) {
      return;
    }
    event.MEDIA_GESTURE = true;
    event.preventDefault();
    const isDblEvent = peek(this.$props.event)?.startsWith("dbl");
    if (!isDblEvent) {
      if (this.Ld === 0) {
        setTimeout(() => {
          if (this.Ld === 1)
            this.Od(event);
        }, 250);
      }
    } else if (this.Ld === 1) {
      queueMicrotask(() => this.Od(event));
      clearTimeout(this.Nd);
      this.Ld = 0;
      return;
    }
    if (this.Ld === 0) {
      this.Nd = window.setTimeout(() => {
        this.Ld = 0;
      }, 275);
    }
    this.Ld++;
  }
  Od(event) {
    this.el.setAttribute("data-triggered", "");
    requestAnimationFrame(() => {
      if (this.Sd()) {
        this.Td(peek(this.$props.action), event);
      }
      requestAnimationFrame(() => {
        this.el.removeAttribute("data-triggered");
      });
    });
  }
  /** Validate event occurred in gesture bounds. */
  Rd(event) {
    if (!this.el)
      return false;
    if (isPointerEvent(event) || isMouseEvent(event) || isTouchEvent(event)) {
      const touch = isTouchEvent(event) ? event.touches[0] : void 0;
      const clientX = touch?.clientX ?? event.clientX;
      const clientY = touch?.clientY ?? event.clientY;
      const rect = this.el.getBoundingClientRect();
      const inBounds = clientY >= rect.top && clientY <= rect.bottom && clientX >= rect.left && clientX <= rect.right;
      return event.type.includes("leave") ? !inBounds : inBounds;
    }
    return true;
  }
  /** Validate gesture has the highest z-index in this triggered group. */
  Sd() {
    const gestures = this.n.player.querySelectorAll(
      "media-gesture[data-triggered]"
    );
    return Array.from(gestures).sort(
      (a, b) => +getComputedStyle(b).zIndex - +getComputedStyle(a).zIndex
    )[0]?.component === this;
  }
  Td(action, trigger) {
    if (!action)
      return;
    const [method, value] = action.replace(/:([a-z])/, "-$1").split(":");
    if (action.includes(":fullscreen")) {
      this.n.remote.toggleFullscreen("prefer-media", trigger);
    } else if (action.includes("seek:")) {
      this.n.remote.seek(peek(this.n.$store.currentTime) + (+value || 0), trigger);
    } else {
      this.n.remote[kebabToCamelCase(method)](trigger);
    }
  }
}

const $$_templ$3 = /* @__PURE__ */ $$_create_template(`<!$><svg part="icon" fill="none" viewBox="0 0 120 120" aria-hidden="true"><circle part="track" cx="60" cy="60" r="54" stroke="currentColor"></circle><circle part="track-fill" cx="60" cy="60" r="54" stroke="currentColor" pathLength="100"></circle></svg>`);
class BufferingIndicator extends Component {
  static el = defineElement({
    tagName: "media-buffering-indicator"
  });
  n;
  onAttach() {
    this.n = useMedia();
    this.setAttributes({
      "data-buffering": computed(this.Kd.bind(this))
    });
  }
  Kd() {
    const { canPlay, waiting } = this.n.$store;
    return !canPlay() || waiting();
  }
  render() {
    return $$_next_template($$_templ$3);
  }
}

class CaptionsTextRenderer {
  constructor(_renderer) {
    this.Vd = _renderer;
  }
  priority = 10;
  Ba = null;
  ih = createDisposalBin();
  attach() {
  }
  canRender() {
    return true;
  }
  detach() {
    this.ih.empty();
    this.Vd.reset();
    this.Ba = null;
  }
  changeTrack(track) {
    if (!track || this.Ba === track)
      return;
    this.ih.empty();
    if (track.readyState < 2) {
      this.Vd.reset();
      this.ih.add(
        listenEvent(track, "load", () => this.jh(track), { once: true })
      );
    } else {
      this.jh(track);
    }
    this.ih.add(
      listenEvent(track, "add-cue", (event) => {
        this.Vd.addCue(event.detail);
      }),
      listenEvent(track, "remove-cue", (event) => {
        this.Vd.removeCue(event.detail);
      })
    );
    this.Ba = track;
  }
  jh(track) {
    this.Vd.changeTrack({
      cues: [...track.cues],
      regions: [...track.regions]
    });
  }
}

class Captions extends Component {
  static el = defineElement({
    tagName: "media-captions",
    props: { textDir: "ltr" }
  });
  n;
  Vd;
  Ud;
  onAttach() {
    this.n = useMedia();
    this.setAttributes({
      "aria-hidden": $ariaBool(this.mb.bind(this))
    });
  }
  onConnect(el) {
    this.Vd = new CaptionsRenderer(el);
    this.Ud = new CaptionsTextRenderer(this.Vd);
    effect(this.Xd.bind(this));
  }
  onDisconnect() {
    if (this.Ud) {
      this.Ud.detach();
      this.n.textRenderers.remove(this.Ud);
    }
    this.Vd?.destroy();
  }
  mb() {
    const { textTrack } = this.n.$store, track = textTrack();
    return !track || !isTrackCaptionKind(track);
  }
  Xd() {
    const { viewType } = this.n.$store;
    if (viewType() === "audio") {
      return this.Yd();
    } else {
      return this.Zd();
    }
  }
  Yd() {
    effect(this.rc.bind(this));
    return () => {
      this.el.textContent = "";
    };
  }
  rc() {
    if (this.mb())
      return;
    const { textTrack } = this.n.$store;
    this.Wd();
    listenEvent(textTrack(), "cue-change", this.Wd.bind(this));
    effect(this._d.bind(this));
  }
  Wd() {
    this.el.textContent = "";
    const { currentTime, textTrack } = this.n.$store, time = peek(currentTime), activeCues = peek(textTrack).activeCues;
    for (const cue of activeCues) {
      const cueEl = document.createElement("div");
      cueEl.setAttribute("part", "cue");
      cueEl.innerHTML = renderVTTCueString(cue, time);
      this.el.append(cueEl);
    }
  }
  _d() {
    const { currentTime } = this.n.$store;
    updateTimedVTTCueNodes(this.el, currentTime());
  }
  Zd() {
    effect(this.$d.bind(this));
    effect(this.ae.bind(this));
    this.n.textRenderers.add(this.Ud);
    return () => {
      this.el.textContent = "";
      this.Ud.detach();
      this.n.textRenderers.remove(this.Ud);
    };
  }
  $d() {
    this.Vd.dir = this.$props.textDir();
  }
  ae() {
    if (this.mb())
      return;
    const { currentTime } = this.n.$store;
    this.Vd.currentTime = currentTime();
  }
}

const $$_templ$2 = /* @__PURE__ */ $$_create_template(`<!$><div part="container"><div part="text">LIVE</div></div>`);
class LiveIndicator extends Component {
  static el = defineElement({
    tagName: "media-live-indicator"
  });
  n;
  constructor(instance) {
    super(instance);
    this.n = useMedia();
    new FocusVisibleController(instance);
  }
  onAttach(el) {
    const { live, liveEdge } = this.n.$store;
    setARIALabel(el, this.lb.bind(this));
    this.setAttributes({
      tabindex: this.be.bind(this),
      role: this.ce.bind(this),
      "data-live": live,
      "data-live-edge": liveEdge,
      "data-media-button": true
    });
  }
  onConnect(el) {
    onPress(el, this.jb.bind(this));
  }
  lb() {
    const { live } = this.n.$store;
    return live() ? "Go live" : null;
  }
  be() {
    const { live } = this.n.$store;
    return live() ? 0 : null;
  }
  ce() {
    const { live } = this.n.$store;
    return live() ? "button" : null;
  }
  jb(event) {
    const { liveEdge } = this.n.$store;
    if (liveEdge())
      return;
    this.n.remote.seekToLiveEdge(event);
  }
  render() {
    return $$_next_template($$_templ$2);
  }
}

const $$_templ$1 = /* @__PURE__ */ $$_create_template(`<!$><img part="img" />`);
class Poster extends Component {
  static el = defineElement({
    tagName: "media-poster",
    props: { alt: void 0 }
  });
  n;
  de = signal(true);
  ee = signal(false);
  fe;
  ge;
  onAttach(el) {
    this.n = useMedia();
    this.fe = computed(this.he.bind(this));
    this.ge = this.ie.bind(this);
    this.setAttributes({
      "data-loading": this.de,
      "aria-hidden": $ariaBool(this.mb.bind(this))
    });
  }
  onConnect(el) {
    const { canLoad, poster } = this.n.$store;
    window.requestAnimationFrame(() => {
      if (!canLoad())
        preconnect(poster());
    });
    effect(this.je.bind(this));
  }
  mb() {
    const { poster } = this.n.$store;
    return this.ee() || !poster();
  }
  he() {
    const { canLoad, poster } = this.n.$store;
    return canLoad() && poster().length ? poster() : null;
  }
  ie() {
    return this.fe() ? this.$props.alt() : null;
  }
  je() {
    const { canLoad, poster } = this.n.$store;
    const isLoading = canLoad() && !!poster();
    this.de.set(isLoading);
    this.ee.set(false);
  }
  ke() {
    this.de.set(false);
  }
  Zb() {
    this.de.set(false);
    this.ee.set(true);
  }
  render() {
    const { crossorigin } = this.n.$store;
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ$1);
      $$_effect(() => $$_attr($$_root, "src", this.fe()));
      $$_effect(() => $$_attr($$_root, "alt", this.ge()));
      $$_effect(() => $$_attr($$_root, "crossorigin", crossorigin()));
      $$_listen($$_root, "load", this.ke.bind(this));
      $$_listen($$_root, "error", this.Zb.bind(this));
      return $$_root;
    })();
  }
}

const $$_templ = /* @__PURE__ */ $$_create_template(`<!$><span><!$></span>`);
class Time extends Component {
  static el = defineElement({
    tagName: "media-time",
    props: {
      type: "current",
      showHours: false,
      padHours: null,
      padMinutes: null,
      remainder: false
    }
  });
  n;
  le;
  onAttach() {
    this.n = useMedia();
    this.le = computed(this.Pb.bind(this));
  }
  Pb() {
    const { type, remainder, padHours, padMinutes, showHours } = this.$props, seconds = this.me(type()), duration = this.n.$store.duration();
    if (!Number.isFinite(seconds + duration))
      return "LIVE";
    const time = remainder() ? Math.max(0, duration - seconds) : seconds;
    return formatTime(
      time,
      padHours(),
      isNull(padMinutes()) ? time >= 3600 : padMinutes(),
      showHours()
    );
  }
  me(type) {
    const { bufferedEnd, duration, currentTime } = this.n.$store;
    switch (type) {
      case "buffered":
        return bufferedEnd();
      case "duration":
        return duration();
      default:
        return currentTime();
    }
  }
  render() {
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ), $$_expr = $$_walker.nextNode();
      $$_insert_at_marker_lite($$_expr, this.le);
      return $$_root;
    })();
  }
}

function setupPreviewStyles(preview, orientation) {
  let rect = preview.getBoundingClientRect(), styles = {
    "--computed-width": rect.width + "px",
    "--computed-height": rect.height + "px",
    "--preview-width": "var(--media-slider-preview-width, var(--computed-width))",
    "--preview-height": "var(--media-slider-preview-height, var(--computed-height))"
  };
  if (orientation !== "vertical") {
    styles = {
      ...styles,
      "--preview-width-half": "calc(var(--preview-width) / 2)",
      "--preview-left-clamp": "max(var(--preview-width-half), var(--slider-pointer-percent))",
      "--preview-right-clamp": "calc(100% - var(--preview-width-half))",
      "--preview-left": "min(var(--preview-left-clamp), var(--preview-right-clamp))"
    };
  } else {
    styles = {
      ...styles,
      "--preview-height-half": "calc(var(--preview-height) / 2)",
      "--preview-top-clamp": "max(var(--preview-height-half), var(--slider-pointer-percent))",
      "--preview-bottom-clamp": "calc(100% - var(--preview-height-half))",
      "--preview-bottom": "min(var(--preview-top-clamp), var(--preview-bottom-clamp))"
    };
  }
  for (const name of Object.keys(styles)) {
    preview.style.setProperty(name, styles[name]);
  }
}

var preview = /*#__PURE__*/Object.freeze({
  __proto__: null,
  setupPreviewStyles: setupPreviewStyles
});

export { AudioMenuButton as A, BufferingIndicator as B, CaptionButton as C, SliderStoreFactory as D, FullscreenButton as F, Gesture as G, LiveIndicator as L, MuteButton as M, Poster as P, QualityMenuButton as Q, RadioGroup as R, SeekButton as S, Tooltip as T, VolumeSlider as V, Thumbnail as a, PlayButton as b, PIPButton as c, Slider as d, TimeSlider as e, SliderThumbnail as f, SliderValue as g, SliderVideo as h, Time as i, ToggleButton as j, Captions as k, Menu as l, MenuButton as m, MenuItems as n, Radio as o, AudioMenuItems as p, CaptionsMenuButton as q, CaptionsMenuItems as r, ChaptersMenuItems as s, QualityMenuItems as t, PlaybackRateMenuButton as u, PlaybackRateMenuItems as v, FocusVisibleController as w, clampNumber as x, getNumberOfDecimalPlaces as y, toggleButtonProps as z };
