import { isString } from 'maverick.js/std';
import { H as HLS_VIDEO_EXTENSIONS, a as HLS_VIDEO_TYPES } from '../audio/loader.js';
import { P as isHLSSupported } from '../../media-core.js';
import { V as VideoProviderLoader } from '../video/loader.js';

const _HLSProviderLoader = class extends VideoProviderLoader {
  preconnect() {
  }
  canPlay({ src, type }) {
    return _HLSProviderLoader.supported && isString(src) && (HLS_VIDEO_EXTENSIONS.test(src) || HLS_VIDEO_TYPES.has(type));
  }
  async load(context) {
    if (!this._video) {
      throw Error(
        "[vidstack] `<video>` element was not found - did you forget to include `<media-outlet>`?"
      );
    }
    return new (await import('./provider.js')).HLSProvider(this._video, context);
  }
};
let HLSProviderLoader = _HLSProviderLoader;
HLSProviderLoader.supported = isHLSSupported();

export { HLSProviderLoader as H };
