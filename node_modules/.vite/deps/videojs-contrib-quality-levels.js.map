{
  "version": 3,
  "sources": ["../../videojs-contrib-quality-levels/dist/videojs-contrib-quality-levels.es.js"],
  "sourcesContent": ["/*! @name videojs-contrib-quality-levels @version 4.0.0 @license Apache-2.0 */\nimport videojs from 'video.js';\n\n/**\n * A single QualityLevel.\n *\n * interface QualityLevel {\n *   readonly attribute DOMString id;\n *            attribute DOMString label;\n *   readonly attribute long width;\n *   readonly attribute long height;\n *   readonly attribute long bitrate;\n *            attribute boolean enabled;\n * };\n *\n * @class QualityLevel\n */\nclass QualityLevel {\n  /**\n   * Creates a QualityLevel\n   *\n   * @param {Representation|Object} representation The representation of the quality level\n   * @param {string}   representation.id        Unique id of the QualityLevel\n   * @param {number=}  representation.width     Resolution width of the QualityLevel\n   * @param {number=}  representation.height    Resolution height of the QualityLevel\n   * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n   */\n  constructor(representation) {\n    let level = this; // eslint-disable-line\n\n    level.id = representation.id;\n    level.label = level.id;\n    level.width = representation.width;\n    level.height = representation.height;\n    level.bitrate = representation.bandwidth;\n    level.frameRate = representation.frameRate;\n    level.enabled_ = representation.enabled;\n    Object.defineProperty(level, 'enabled', {\n      /**\n       * Get whether the QualityLevel is enabled.\n       *\n       * @return {boolean} True if the QualityLevel is enabled.\n       */\n      get() {\n        return level.enabled_();\n      },\n\n      /**\n       * Enable or disable the QualityLevel.\n       *\n       * @param {boolean} enable true to enable QualityLevel, false to disable.\n       */\n      set(enable) {\n        level.enabled_(enable);\n      }\n\n    });\n    return level;\n  }\n\n}\n\n/**\n * A list of QualityLevels.\n *\n * interface QualityLevelList : EventTarget {\n *   getter QualityLevel (unsigned long index);\n *   readonly attribute unsigned long length;\n *   readonly attribute long selectedIndex;\n *\n *   void addQualityLevel(QualityLevel qualityLevel)\n *   void removeQualityLevel(QualityLevel remove)\n *   QualityLevel? getQualityLevelById(DOMString id);\n *\n *   attribute EventHandler onchange;\n *   attribute EventHandler onaddqualitylevel;\n *   attribute EventHandler onremovequalitylevel;\n * };\n *\n * @extends videojs.EventTarget\n * @class QualityLevelList\n */\n\nclass QualityLevelList extends videojs.EventTarget {\n  /**\n   * Creates a QualityLevelList.\n   */\n  constructor() {\n    super();\n    let list = this; // eslint-disable-line\n\n    list.levels_ = [];\n    list.selectedIndex_ = -1;\n    /**\n     * Get the index of the currently selected QualityLevel.\n     *\n     * @returns {number} The index of the selected QualityLevel. -1 if none selected.\n     * @readonly\n     */\n\n    Object.defineProperty(list, 'selectedIndex', {\n      get() {\n        return list.selectedIndex_;\n      }\n\n    });\n    /**\n     * Get the length of the list of QualityLevels.\n     *\n     * @returns {number} The length of the list.\n     * @readonly\n     */\n\n    Object.defineProperty(list, 'length', {\n      get() {\n        return list.levels_.length;\n      }\n\n    });\n\n    list[Symbol.iterator] = () => list.levels_.values();\n\n    return list;\n  }\n  /**\n   * Adds a quality level to the list.\n   *\n   * @param {Representation|Object} representation The representation of the quality level\n   * @param {string}   representation.id        Unique id of the QualityLevel\n   * @param {number=}  representation.width     Resolution width of the QualityLevel\n   * @param {number=}  representation.height    Resolution height of the QualityLevel\n   * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n   * @return {QualityLevel} the QualityLevel added to the list\n   * @method addQualityLevel\n   */\n\n\n  addQualityLevel(representation) {\n    let qualityLevel = this.getQualityLevelById(representation.id); // Do not add duplicate quality levels\n\n    if (qualityLevel) {\n      return qualityLevel;\n    }\n\n    const index = this.levels_.length;\n    qualityLevel = new QualityLevel(representation);\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get() {\n          return this.levels_[index];\n        }\n\n      });\n    }\n\n    this.levels_.push(qualityLevel);\n    this.trigger({\n      qualityLevel,\n      type: 'addqualitylevel'\n    });\n    return qualityLevel;\n  }\n  /**\n   * Removes a quality level from the list.\n   *\n   * @param {QualityLevel} qualityLevel The QualityLevel to remove from the list.\n   * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed\n   * @method removeQualityLevel\n   */\n\n\n  removeQualityLevel(qualityLevel) {\n    let removed = null;\n\n    for (let i = 0, l = this.length; i < l; i++) {\n      if (this[i] === qualityLevel) {\n        removed = this.levels_.splice(i, 1)[0];\n\n        if (this.selectedIndex_ === i) {\n          this.selectedIndex_ = -1;\n        } else if (this.selectedIndex_ > i) {\n          this.selectedIndex_--;\n        }\n\n        break;\n      }\n    }\n\n    if (removed) {\n      this.trigger({\n        qualityLevel,\n        type: 'removequalitylevel'\n      });\n    }\n\n    return removed;\n  }\n  /**\n   * Searches for a QualityLevel with the given id.\n   *\n   * @param {string} id The id of the QualityLevel to find.\n   * @return {QualityLevel|null} The QualityLevel with id, or null if not found.\n   * @method getQualityLevelById\n   */\n\n\n  getQualityLevelById(id) {\n    for (let i = 0, l = this.length; i < l; i++) {\n      const level = this[i];\n\n      if (level.id === id) {\n        return level;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Resets the list of QualityLevels to empty\n   *\n   * @method dispose\n   */\n\n\n  dispose() {\n    this.selectedIndex_ = -1;\n    this.levels_.length = 0;\n  }\n\n}\n/**\n * change - The selected QualityLevel has changed.\n * addqualitylevel - A QualityLevel has been added to the QualityLevelList.\n * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.\n */\n\n\nQualityLevelList.prototype.allowedEvents_ = {\n  change: 'change',\n  addqualitylevel: 'addqualitylevel',\n  removequalitylevel: 'removequalitylevel'\n}; // emulate attribute EventHandler support to allow for feature detection\n\nfor (const event in QualityLevelList.prototype.allowedEvents_) {\n  QualityLevelList.prototype['on' + event] = null;\n}\n\nvar version = \"4.0.0\";\n\n/**\n * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and\n * event handlers.\n *\n * @param {Player} player Player object.\n * @param {Object} options Plugin options object.\n * @return {QualityLevelList} a list of QualityLevels\n */\n\nconst initPlugin = function (player, options) {\n  const originalPluginFn = player.qualityLevels;\n  const qualityLevelList = new QualityLevelList();\n\n  const disposeHandler = function () {\n    qualityLevelList.dispose();\n    player.qualityLevels = originalPluginFn;\n    player.off('dispose', disposeHandler);\n  };\n\n  player.on('dispose', disposeHandler);\n\n  player.qualityLevels = () => qualityLevelList;\n\n  player.qualityLevels.VERSION = version;\n  return qualityLevelList;\n};\n/**\n * A video.js plugin.\n *\n * In the plugin function, the value of `this` is a video.js `Player`\n * instance. You cannot rely on the player being in a \"ready\" state here,\n * depending on how the plugin is invoked. This may or may not be important\n * to you; if not, remove the wait for \"ready\"!\n *\n * @param {Object} options Plugin options object\n * @return {QualityLevelList} a list of QualityLevels\n */\n\n\nconst qualityLevels = function (options) {\n  return initPlugin(this, videojs.obj.merge({}, options));\n}; // Register the plugin with video.js.\n\n\nvideojs.registerPlugin('qualityLevels', qualityLevels); // Include the version number.\n\nqualityLevels.VERSION = version;\n\nexport default qualityLevels;\n"],
  "mappings": "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",
  "names": []
}
